
E62_LAB_03_LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006434  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080066c8  080066c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c8  080066c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000074  08006744  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  08006744  00021a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eb6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b2  00000000  00000000  00037f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003516  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e6e  00000000  00000000  000406ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb5a5  00000000  00000000  0005455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fb01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  0010fb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065ac 	.word	0x080065ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080065ac 	.word	0x080065ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb69 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f859 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8eb 	bl	8000458 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000282:	f000 f89b 	bl	80003bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000286:	4820      	ldr	r0, [pc, #128]	; (8000308 <main+0x98>)
 8000288:	f001 ffd4 	bl	8002234 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800028c:	f002 fdb4 	bl	8002df8 <osKernelInitialize>
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  LcdInit();
 8000290:	f002 fc72 	bl	8002b78 <LcdInit>
  uint8_t Str1[] = "Mahanakorn";
 8000294:	4a1d      	ldr	r2, [pc, #116]	; (800030c <main+0x9c>)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	c303      	stmia	r3!, {r0, r1}
 800029e:	801a      	strh	r2, [r3, #0]
 80002a0:	3302      	adds	r3, #2
 80002a2:	0c12      	lsrs	r2, r2, #16
 80002a4:	701a      	strb	r2, [r3, #0]
  uint8_t Str2[20];
  uint16_t round = 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */


  xBinarySemaphore = xSemaphoreCreateBinary();
 80002aa:	2203      	movs	r2, #3
 80002ac:	2100      	movs	r1, #0
 80002ae:	2001      	movs	r0, #1
 80002b0:	f003 f875 	bl	800339e <xQueueGenericCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <main+0xa0>)
 80002b8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(xBinarySemaphore);
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <main+0xa0>)
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	f003 f8cc 	bl	8003460 <xQueueGenericSend>
  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <main+0xa4>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <main+0xa8>)
 80002ce:	f002 fdc7 	bl	8002e60 <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <main+0xac>)
 80002d6:	6013      	str	r3, [r2, #0]

  xTaskCreate((TaskFunction_t *)TaskUpline,"TaskUpline", 128, NULL , osPriorityLow1, NULL);
 80002d8:	2300      	movs	r3, #0
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2309      	movs	r3, #9
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2300      	movs	r3, #0
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	490e      	ldr	r1, [pc, #56]	; (8000320 <main+0xb0>)
 80002e6:	480f      	ldr	r0, [pc, #60]	; (8000324 <main+0xb4>)
 80002e8:	f003 fe1e 	bl	8003f28 <xTaskCreate>
  xTaskCreate((TaskFunction_t *)TaskDownline, "TaskDownline", 128, NULL , osPriorityLow, NULL);
 80002ec:	2300      	movs	r3, #0
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2308      	movs	r3, #8
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2300      	movs	r3, #0
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	490b      	ldr	r1, [pc, #44]	; (8000328 <main+0xb8>)
 80002fa:	480c      	ldr	r0, [pc, #48]	; (800032c <main+0xbc>)
 80002fc:	f003 fe14 	bl	8003f28 <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
//  osKernelStart();
  vTaskStartScheduler();
 8000300:	f003 ff82 	bl	8004208 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x94>
 8000306:	bf00      	nop
 8000308:	200019a8 	.word	0x200019a8
 800030c:	080065ec 	.word	0x080065ec
 8000310:	200019f4 	.word	0x200019f4
 8000314:	08006638 	.word	0x08006638
 8000318:	080006a9 	.word	0x080006a9
 800031c:	200019a4 	.word	0x200019a4
 8000320:	080065d0 	.word	0x080065d0
 8000324:	08000591 	.word	0x08000591
 8000328:	080065dc 	.word	0x080065dc
 800032c:	0800061d 	.word	0x0800061d

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f005 fd0c 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000356:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800035a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fdb5 	bl	8000ee8 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000384:	f000 f9aa 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	2302      	movs	r3, #2
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fca8 	bl	8001cf8 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ae:	f000 f995 	bl	80006dc <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <MX_TIM4_Init+0x94>)
 80003dc:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <MX_TIM4_Init+0x98>)
 80003de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_TIM4_Init+0x94>)
 80003e2:	2247      	movs	r2, #71	; 0x47
 80003e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_TIM4_Init+0x94>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_TIM4_Init+0x94>)
 80003ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80003f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_TIM4_Init+0x94>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_TIM4_Init+0x94>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <MX_TIM4_Init+0x94>)
 8000402:	f001 febf 	bl	8002184 <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800040c:	f000 f966 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <MX_TIM4_Init+0x94>)
 800041e:	f002 f8f4 	bl	800260a <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000428:	f000 f958 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_TIM4_Init+0x94>)
 800043a:	f002 faff 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000444:	f000 f94a 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200019a8 	.word	0x200019a8
 8000454:	40000800 	.word	0x40000800

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	4b37      	ldr	r3, [pc, #220]	; (800054c <MX_GPIO_Init+0xf4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a36      	ldr	r2, [pc, #216]	; (800054c <MX_GPIO_Init+0xf4>)
 8000474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a30      	ldr	r2, [pc, #192]	; (800054c <MX_GPIO_Init+0xf4>)
 800048c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <MX_GPIO_Init+0xf4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <MX_GPIO_Init+0xf4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a2a      	ldr	r2, [pc, #168]	; (800054c <MX_GPIO_Init+0xf4>)
 80004a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <MX_GPIO_Init+0xf4>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <MX_GPIO_Init+0xf4>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a24      	ldr	r2, [pc, #144]	; (800054c <MX_GPIO_Init+0xf4>)
 80004bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <MX_GPIO_Init+0xf4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	210f      	movs	r1, #15
 80004d2:	481f      	ldr	r0, [pc, #124]	; (8000550 <MX_GPIO_Init+0xf8>)
 80004d4:	f000 fcf0 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2107      	movs	r1, #7
 80004dc:	481d      	ldr	r0, [pc, #116]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004de:	f000 fceb 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_13, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80004e8:	481b      	ldr	r0, [pc, #108]	; (8000558 <MX_GPIO_Init+0x100>)
 80004ea:	f000 fce5 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80004ee:	230f      	movs	r3, #15
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0xf8>)
 8000506:	f000 fb5d 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800050a:	2307      	movs	r3, #7
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0xfc>)
 8000522:	f000 fb4f 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_13;
 8000526:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_GPIO_Init+0x100>)
 8000540:	f000 fb40 	bl	8000bc4 <HAL_GPIO_Init>

}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	48000800 	.word	0x48000800
 8000554:	48000400 	.word	0x48000400
 8000558:	48001000 	.word	0x48001000

0800055c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us (uint16_t us){
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <delay_us+0x30>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 800056e:	bf00      	nop
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <delay_us+0x30>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	429a      	cmp	r2, r3
 800057a:	d3f9      	bcc.n	8000570 <delay_us+0x14>
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200019a8 	.word	0x200019a8

08000590 <TaskUpline>:


void TaskUpline(void *argument){
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
	char msg[10];
	for(;;){
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <TaskUpline+0x7c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f9d1 	bl	800394c <xQueueSemaphoreTake>

		LcdSetPosition(LCD_LINE_1, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f002 fb33 	bl	8002c18 <LcdSetPosition>
		LcdPutS((uint8_t *)"Hello LINE 1 ");
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <TaskUpline+0x80>)
 80005b4:	f002 fb62 	bl	8002c7c <LcdPutS>
		LcdSetPosition(LCD_LINE_1, 13);
 80005b8:	210d      	movs	r1, #13
 80005ba:	2000      	movs	r0, #0
 80005bc:	f002 fb2c 	bl	8002c18 <LcdSetPosition>
		sprintf(msg,"%d",count++);
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	617a      	str	r2, [r7, #20]
 80005c6:	f107 0008 	add.w	r0, r7, #8
 80005ca:	461a      	mov	r2, r3
 80005cc:	4911      	ldr	r1, [pc, #68]	; (8000614 <TaskUpline+0x84>)
 80005ce:	f005 fbcd 	bl	8005d6c <siprintf>
		LcdPutS((uint8_t *)msg);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fb50 	bl	8002c7c <LcdPutS>

		if( count > 999 ) {
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e2:	db08      	blt.n	80005f6 <TaskUpline+0x66>
			LcdSetPosition(LCD_LINE_1, 13);
 80005e4:	210d      	movs	r1, #13
 80005e6:	2000      	movs	r0, #0
 80005e8:	f002 fb16 	bl	8002c18 <LcdSetPosition>
			LcdPutS((uint8_t *)"   ");
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <TaskUpline+0x88>)
 80005ee:	f002 fb45 	bl	8002c7c <LcdPutS>
			count = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
		}

		xSemaphoreGive(xBinarySemaphore);
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <TaskUpline+0x7c>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	f002 ff2e 	bl	8003460 <xQueueGenericSend>
		vTaskDelay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f003 fdcb 	bl	80041a0 <vTaskDelay>
	for(;;){
 800060a:	e7c7      	b.n	800059c <TaskUpline+0xc>
 800060c:	200019f4 	.word	0x200019f4
 8000610:	080065f8 	.word	0x080065f8
 8000614:	08006608 	.word	0x08006608
 8000618:	0800660c 	.word	0x0800660c

0800061c <TaskDownline>:
	}
}

void TaskDownline(void *argument){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
	char msg[10];
	for(;;){
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <TaskDownline+0x7c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f98b 	bl	800394c <xQueueSemaphoreTake>
		LcdSetPosition(LCD_LINE_2, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f002 faed 	bl	8002c18 <LcdSetPosition>
		LcdPutS((uint8_t *)"Hello LINE 2 ");
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <TaskDownline+0x80>)
 8000640:	f002 fb1c 	bl	8002c7c <LcdPutS>
		LcdSetPosition(LCD_LINE_2, 13);
 8000644:	210d      	movs	r1, #13
 8000646:	2001      	movs	r0, #1
 8000648:	f002 fae6 	bl	8002c18 <LcdSetPosition>
		sprintf(msg,"%d",count++);
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	617a      	str	r2, [r7, #20]
 8000652:	f107 0008 	add.w	r0, r7, #8
 8000656:	461a      	mov	r2, r3
 8000658:	4911      	ldr	r1, [pc, #68]	; (80006a0 <TaskDownline+0x84>)
 800065a:	f005 fb87 	bl	8005d6c <siprintf>
		LcdPutS((uint8_t *)msg);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fb0a 	bl	8002c7c <LcdPutS>

		if( count > 999 ) {
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066e:	db08      	blt.n	8000682 <TaskDownline+0x66>
			LcdSetPosition(LCD_LINE_2, 13);
 8000670:	210d      	movs	r1, #13
 8000672:	2001      	movs	r0, #1
 8000674:	f002 fad0 	bl	8002c18 <LcdSetPosition>
			LcdPutS((uint8_t *)"   ");
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <TaskDownline+0x88>)
 800067a:	f002 faff 	bl	8002c7c <LcdPutS>
			count = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
		}

		xSemaphoreGive(xBinarySemaphore);
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <TaskDownline+0x7c>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	f002 fee8 	bl	8003460 <xQueueGenericSend>
		vTaskDelay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f003 fd85 	bl	80041a0 <vTaskDelay>
	for(;;){
 8000696:	e7c7      	b.n	8000628 <TaskDownline+0xc>
 8000698:	200019f4 	.word	0x200019f4
 800069c:	08006610 	.word	0x08006610
 80006a0:	08006608 	.word	0x08006608
 80006a4:	0800660c 	.word	0x0800660c

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fc7f 	bl	8002fb4 <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartDefaultTask+0x8>

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ca:	f000 f955 	bl	8000978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40012c00 	.word	0x40012c00

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x44>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <HAL_TIM_Base_MspInit+0x38>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d10b      	bne.n	800075e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_TIM_Base_MspInit+0x3c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <HAL_TIM_Base_MspInit+0x3c>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_TIM_Base_MspInit+0x3c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40000800 	.word	0x40000800
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2019      	movs	r0, #25
 800078a:	f000 f9f1 	bl	8000b70 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800078e:	2019      	movs	r0, #25
 8000790:	f000 fa0a 	bl	8000ba8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_InitTick+0x9c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <HAL_InitTick+0x9c>)
 800079a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_InitTick+0x9c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 0210 	add.w	r2, r7, #16
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fcb2 	bl	8002120 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007bc:	f001 fc8e 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 80007c0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_InitTick+0xa0>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_InitTick+0xa4>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_InitTick+0xa8>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_InitTick+0xa4>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_InitTick+0xa4>)
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_InitTick+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_InitTick+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_InitTick+0xa4>)
 80007f2:	f001 fcc7 	bl	8002184 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <HAL_InitTick+0xa4>)
 80007fe:	f001 fd7b 	bl	80022f8 <HAL_TIM_Base_Start_IT>
 8000802:	4603      	mov	r3, r0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	431bde83 	.word	0x431bde83
 8000818:	200019f8 	.word	0x200019f8
 800081c:	40012c00 	.word	0x40012c00

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800085a:	f001 fdb7 	bl	80023cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200019f8 	.word	0x200019f8

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f005 fa28 	bl	8005cec <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000a000 	.word	0x2000a000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	20000090 	.word	0x20000090
 80008d0:	20001a98 	.word	0x20001a98

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff ffd7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f005 f9e7 	bl	8005cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fca1 	bl	8000270 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800093c:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8000940:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000944:	20001a98 	.word	0x20001a98

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f8fc 	bl	8000b5a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ff06 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fec0 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20001a44 	.word	0x20001a44

080009a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20001a44 	.word	0x20001a44

080009b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff ffee 	bl	80009a0 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffde 	bl	80009a0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <__NVIC_EnableIRQ+0x38>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff4c 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b82:	f7ff ff61 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f7ff ffb1 	bl	8000af4 <NVIC_EncodePriority>
 8000b92:	4602      	mov	r2, r0
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff80 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff54 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e154      	b.n	8000e7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8146 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d00b      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c00:	2b11      	cmp	r3, #17
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b12      	cmp	r3, #18
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	f003 0201 	and.w	r2, r3, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0xea>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	d123      	bne.n	8000cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	6939      	ldr	r1, [r7, #16]
 8000cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0203 	and.w	r2, r3, #3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80a0 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d38:	4b58      	ldr	r3, [pc, #352]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a57      	ldr	r2, [pc, #348]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d50:	4a53      	ldr	r2, [pc, #332]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7a:	d019      	beq.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2e0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2e4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <HAL_GPIO_Init+0x2ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1dc>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da0:	2305      	movs	r3, #5
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000db0:	2300      	movs	r3, #0
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc2:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e1e:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f aea3 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f000 bef4 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 816a 	beq.w	80011e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f12:	4bb3      	ldr	r3, [pc, #716]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1e:	4bb0      	ldr	r3, [pc, #704]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d159      	bne.n	8000fde <HAL_RCC_OscConfig+0xf6>
 8000f2a:	4bad      	ldr	r3, [pc, #692]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d152      	bne.n	8000fde <HAL_RCC_OscConfig+0xf6>
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x82>
 8000f64:	4b9e      	ldr	r3, [pc, #632]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0xae>
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f82:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f92:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f9a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f9e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fa2:	fa92 f2a2 	rbit	r2, r2
 8000fa6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000faa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fae:	fab2 f282 	clz	r2, r2
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f002 021f 	and.w	r2, r2, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 810c 	beq.w	80011e4 <HAL_RCC_OscConfig+0x2fc>
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 8106 	bne.w	80011e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f000 be86 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d106      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x110>
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7c      	ldr	r2, [pc, #496]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e030      	b.n	800105a <HAL_RCC_OscConfig+0x172>
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x134>
 8001002:	4b77      	ldr	r3, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a76      	ldr	r2, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b74      	ldr	r3, [pc, #464]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a73      	ldr	r2, [pc, #460]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e01e      	b.n	800105a <HAL_RCC_OscConfig+0x172>
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001026:	d10c      	bne.n	8001042 <HAL_RCC_OscConfig+0x15a>
 8001028:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6c      	ldr	r2, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800102e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800103a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	e00b      	b.n	800105a <HAL_RCC_OscConfig+0x172>
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a63      	ldr	r2, [pc, #396]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 8001054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800105a:	4b61      	ldr	r3, [pc, #388]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f023 020f 	bic.w	r2, r3, #15
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	495d      	ldr	r1, [pc, #372]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800106a:	4313      	orrs	r3, r2
 800106c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d059      	beq.n	800112c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc92 	bl	80009a0 <HAL_GetTick>
 800107c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001082:	f7ff fc8d 	bl	80009a0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d902      	bls.n	8001098 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	f000 be29 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
 8001098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d102      	bne.n	80010ca <HAL_RCC_OscConfig+0x1e2>
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x20e>
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800110a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0ab      	beq.n	8001082 <HAL_RCC_OscConfig+0x19a>
 800112a:	e05c      	b.n	80011e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc38 	bl	80009a0 <HAL_GetTick>
 8001130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fc33 	bl	80009a0 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d902      	bls.n	800114c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	f000 bdcf 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
 800114c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001150:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001160:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x296>
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	e015      	b.n	80011aa <HAL_RCC_OscConfig+0x2c2>
 800117e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001182:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001196:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800119a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_RCC_OscConfig+0x2f8>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ab      	bne.n	8001136 <HAL_RCC_OscConfig+0x24e>
 80011de:	e002      	b.n	80011e6 <HAL_RCC_OscConfig+0x2fe>
 80011e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 816f 	beq.w	80014d4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f6:	4bd0      	ldr	r3, [pc, #832]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001202:	4bcd      	ldr	r3, [pc, #820]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d16c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x400>
 800120e:	4bca      	ldr	r3, [pc, #808]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d166      	bne.n	80012e8 <HAL_RCC_OscConfig+0x400>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800122c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <HAL_RCC_OscConfig+0x362>
 8001244:	4bbc      	ldr	r3, [pc, #752]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	e013      	b.n	8001272 <HAL_RCC_OscConfig+0x38a>
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001262:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800126e:	4bb2      	ldr	r3, [pc, #712]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2202      	movs	r2, #2
 8001274:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001278:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001284:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_RCC_OscConfig+0x3cc>
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d002      	beq.n	80012b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f000 bd1b 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	21f8      	movs	r1, #248	; 0xf8
 80012c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012cc:	fa91 f1a1 	rbit	r1, r1
 80012d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012d8:	fab1 f181 	clz	r1, r1
 80012dc:	b2c9      	uxtb	r1, r1
 80012de:	408b      	lsls	r3, r1
 80012e0:	4995      	ldr	r1, [pc, #596]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e0f5      	b.n	80014d4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8085 	beq.w	80013fe <HAL_RCC_OscConfig+0x516>
 80012f4:	2301      	movs	r3, #1
 80012f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001306:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	2301      	movs	r3, #1
 800131e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb3e 	bl	80009a0 <HAL_GetTick>
 8001324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fb39 	bl	80009a0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d902      	bls.n	8001340 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	f000 bcd5 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001352:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0x488>
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e013      	b.n	8001398 <HAL_RCC_OscConfig+0x4b0>
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001388:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	2202      	movs	r2, #2
 800139a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800139e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013a2:	fa92 f2a2 	rbit	r2, r2
 80013a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013ae:	fab2 f282 	clz	r2, r2
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f002 021f 	and.w	r2, r2, #31
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0af      	beq.n	800132a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	21f8      	movs	r1, #248	; 0xf8
 80013da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013e2:	fa91 f1a1 	rbit	r1, r1
 80013e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013ee:	fab1 f181 	clz	r1, r1
 80013f2:	b2c9      	uxtb	r1, r1
 80013f4:	408b      	lsls	r3, r1
 80013f6:	4950      	ldr	r1, [pc, #320]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e06a      	b.n	80014d4 <HAL_RCC_OscConfig+0x5ec>
 80013fe:	2301      	movs	r3, #1
 8001400:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	461a      	mov	r2, r3
 8001426:	2300      	movs	r3, #0
 8001428:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fab9 	bl	80009a0 <HAL_GetTick>
 800142e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fab4 	bl	80009a0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 bc50 	b.w	8001cea <HAL_RCC_OscConfig+0xe02>
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800145c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x592>
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	e013      	b.n	80014a2 <HAL_RCC_OscConfig+0x5ba>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x650>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2202      	movs	r2, #2
 80014a4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ac:	fa92 f2a2 	rbit	r2, r2
 80014b0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014b8:	fab2 f282 	clz	r2, r2
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	f042 0220 	orr.w	r2, r2, #32
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f002 021f 	and.w	r2, r2, #31
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f202 	lsl.w	r2, r1, r2
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1af      	bne.n	8001434 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80da 	beq.w	8001698 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d069      	beq.n	80015c2 <HAL_RCC_OscConfig+0x6da>
 80014ee:	2301      	movs	r3, #1
 80014f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x654>)
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fa42 	bl	80009a0 <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fa3d 	bl	80009a0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d906      	bls.n	8001540 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e3d9      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	10908120 	.word	0x10908120
 8001540:	2302      	movs	r3, #2
 8001542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001552:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001580:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	4ba5      	ldr	r3, [pc, #660]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001586:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800158a:	2102      	movs	r1, #2
 800158c:	6019      	str	r1, [r3, #0]
 800158e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f1a3 	rbit	r1, r3
 8001598:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800159c:	6019      	str	r1, [r3, #0]
  return result;
 800159e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0b0      	beq.n	8001522 <HAL_RCC_OscConfig+0x63a>
 80015c0:	e06a      	b.n	8001698 <HAL_RCC_OscConfig+0x7b0>
 80015c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015d8:	601a      	str	r2, [r3, #0]
  return result;
 80015da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b8c      	ldr	r3, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x934>)
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	461a      	mov	r2, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff f9d4 	bl	80009a0 <HAL_GetTick>
 80015f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e009      	b.n	8001612 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff f9cf 	bl	80009a0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e36b      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 8001612:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001646:	2202      	movs	r2, #2
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001658:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165a:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001662:	2102      	movs	r1, #2
 8001664:	6019      	str	r1, [r3, #0]
 8001666:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f1a3 	rbit	r1, r3
 8001670:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001674:	6019      	str	r1, [r3, #0]
  return result;
 8001676:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2101      	movs	r1, #1
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1b2      	bne.n	80015fe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8158 	beq.w	8001958 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a56      	ldr	r2, [pc, #344]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b54      	ldr	r3, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCC_OscConfig+0x938>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11a      	bne.n	8001722 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_RCC_OscConfig+0x938>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <HAL_RCC_OscConfig+0x938>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f8:	f7ff f952 	bl	80009a0 <HAL_GetTick>
 80016fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	e009      	b.n	8001716 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7ff f94d 	bl	80009a0 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e2e9      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <HAL_RCC_OscConfig+0x938>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0ef      	beq.n	8001702 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x852>
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a39      	ldr	r2, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e02f      	b.n	800179a <HAL_RCC_OscConfig+0x8b2>
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x876>
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a33      	ldr	r2, [pc, #204]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	e01d      	b.n	800179a <HAL_RCC_OscConfig+0x8b2>
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x89a>
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x8b2>
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a21      	ldr	r2, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d06b      	beq.n	800187c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f8fc 	bl	80009a0 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff f8f7 	bl	80009a0 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e291      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 80017c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017f4:	601a      	str	r2, [r3, #0]
  return result;
 80017f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d109      	bne.n	8001824 <HAL_RCC_OscConfig+0x93c>
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <HAL_RCC_OscConfig+0x930>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x958>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	10908120 	.word	0x10908120
 8001820:	40007000 	.word	0x40007000
 8001824:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001828:	2202      	movs	r2, #2
 800182a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4bbb      	ldr	r3, [pc, #748]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001844:	2102      	movs	r1, #2
 8001846:	6011      	str	r1, [r2, #0]
 8001848:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	fa92 f1a2 	rbit	r1, r2
 8001852:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001856:	6011      	str	r1, [r2, #0]
  return result;
 8001858:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f002 021f 	and.w	r2, r2, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d099      	beq.n	80017ae <HAL_RCC_OscConfig+0x8c6>
 800187a:	e063      	b.n	8001944 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff f890 	bl	80009a0 <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff f88b 	bl	80009a0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e225      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 800189e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0xa06>
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	e00d      	b.n	800190a <HAL_RCC_OscConfig+0xa22>
 80018ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800190e:	2102      	movs	r1, #2
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fa92 f1a2 	rbit	r1, r2
 800191c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001920:	6011      	str	r1, [r2, #0]
  return result;
 8001922:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1a0      	bne.n	8001886 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001944:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b77      	ldr	r3, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 81c2 	beq.w	8001ce8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	f000 819c 	beq.w	8001caa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 8114 	bne.w	8001ba6 <HAL_RCC_OscConfig+0xcbe>
 800197e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001996:	601a      	str	r2, [r3, #0]
  return result;
 8001998:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800199c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	461a      	mov	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7fe fff4 	bl	80009a0 <HAL_GetTick>
 80019b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe ffef 	bl	80009a0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e18b      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 80019d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ea:	601a      	str	r2, [r3, #0]
  return result;
 80019ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0xb24>
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	e01b      	b.n	8001a44 <HAL_RCC_OscConfig+0xb5c>
 8001a0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	fa92 f1a2 	rbit	r1, r2
 8001a58:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a5c:	6011      	str	r1, [r2, #0]
  return result;
 8001a5e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d19e      	bne.n	80019be <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ab4:	601a      	str	r2, [r3, #0]
  return result;
 8001ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ff65 	bl	80009a0 <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ada:	e009      	b.n	8001af0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe ff60 	bl	80009a0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0fc      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 8001af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b08:	601a      	str	r2, [r3, #0]
  return result;
 8001b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0xc48>
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCC_OscConfig+0xc44>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e01e      	b.n	8001b68 <HAL_RCC_OscConfig+0xc80>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_OscConfig+0xe0c>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b70:	6011      	str	r1, [r2, #0]
 8001b72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fa92 f1a2 	rbit	r1, r2
 8001b7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b80:	6011      	str	r1, [r2, #0]
  return result;
 8001b82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f042 0220 	orr.w	r2, r2, #32
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f002 021f 	and.w	r2, r2, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d09b      	beq.n	8001adc <HAL_RCC_OscConfig+0xbf4>
 8001ba4:	e0a0      	b.n	8001ce8 <HAL_RCC_OscConfig+0xe00>
 8001ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001baa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fee0 	bl	80009a0 <HAL_GetTick>
 8001be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fedb 	bl	80009a0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e077      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0xd4c>
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_OscConfig+0xe0c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e01b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd84>
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_OscConfig+0xe0c>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f107 0210 	add.w	r2, r7, #16
 8001c70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c74:	6011      	str	r1, [r2, #0]
 8001c76:	f107 0210 	add.w	r2, r7, #16
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fa92 f1a2 	rbit	r1, r2
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	6011      	str	r1, [r2, #0]
  return result;
 8001c86:	f107 020c 	add.w	r2, r7, #12
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d19e      	bne.n	8001be6 <HAL_RCC_OscConfig+0xcfe>
 8001ca8:	e01e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e018      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_RCC_OscConfig+0xe0c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b09e      	sub	sp, #120	; 0x78
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e162      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b8d      	ldr	r3, [pc, #564]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	498b      	ldr	r1, [pc, #556]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e14a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	497f      	ldr	r1, [pc, #508]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80dc 	beq.w	8001f24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d13c      	bne.n	8001dee <HAL_RCC_ClockConfig+0xf6>
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xa6>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e00f      	b.n	8001dbe <HAL_RCC_ClockConfig+0xc6>
 8001d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	667b      	str	r3, [r7, #100]	; 0x64
 8001dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
 8001db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d17b      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0f3      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d13c      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x178>
 8001df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x128>
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_ClockConfig+0x148>
 8001e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
 8001e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e44:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e48:	fa92 f2a2 	rbit	r2, r2
 8001e4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e50:	fab2 f282 	clz	r2, r2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f002 021f 	and.w	r2, r2, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13a      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b2      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
 8001e70:	2302      	movs	r3, #2
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x1a0>
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e00d      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1bc>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	61ba      	str	r2, [r7, #24]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	617a      	str	r2, [r7, #20]
  return result;
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e079      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	491a      	ldr	r1, [pc, #104]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fd54 	bl	80009a0 <HAL_GetTick>
 8001ef8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fd50 	bl	80009a0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e061      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d214      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4906      	ldr	r1, [pc, #24]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e040      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4912      	ldr	r1, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f9a:	f000 f829 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	22f0      	movs	r2, #240	; 0xf0
 8001faa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	40d3      	lsrs	r3, r2
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x2ec>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_RCC_ClockConfig+0x2f0>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_ClockConfig+0x2f4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fbd0 	bl	8000774 <HAL_InitTick>
  
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3778      	adds	r7, #120	; 0x78
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	0800665c 	.word	0x0800665c
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x30>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x36>
 800201e:	e03c      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e03c      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800202c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002030:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	607a      	str	r2, [r7, #4]
  return result;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	40d3      	lsrs	r3, r2
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	220f      	movs	r2, #15
 8002054:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	60fa      	str	r2, [r7, #12]
  return result;
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	40d3      	lsrs	r3, r2
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800209c:	623b      	str	r3, [r7, #32]
      break;
 800209e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a0:	6a3b      	ldr	r3, [r7, #32]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	372c      	adds	r7, #44	; 0x2c
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	08006674 	.word	0x08006674
 80020bc:	08006684 	.word	0x08006684
 80020c0:	003d0900 	.word	0x003d0900

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020e2:	f7ff ffef 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e6:	4601      	mov	r1, r0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	603a      	str	r2, [r7, #0]
  return result;
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	40d3      	lsrs	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_RCC_GetPCLK2Freq+0x40>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	0800666c 	.word	0x0800666c

08002120 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	220f      	movs	r2, #15
 800212e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCC_GetClockConfig+0x60>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e049      	b.n	800222a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fac2 	bl	8000734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 fb10 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e042      	b.n	80022d2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_TIM_Base_Start+0xac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d018      	beq.n	8002290 <HAL_TIM_Base_Start+0x5c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d013      	beq.n	8002290 <HAL_TIM_Base_Start+0x5c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_TIM_Base_Start+0xb0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start+0x5c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_TIM_Base_Start+0xb4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start+0x5c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_TIM_Base_Start+0xb8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start+0x5c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_TIM_Base_Start+0xbc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d115      	bne.n	80022bc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_TIM_Base_Start+0xc0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d015      	beq.n	80022ce <HAL_TIM_Base_Start+0x9a>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d011      	beq.n	80022ce <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	e008      	b.n	80022ce <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e000      	b.n	80022d0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40013400 	.word	0x40013400
 80022f0:	40014000 	.word	0x40014000
 80022f4:	00010007 	.word	0x00010007

080022f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e04a      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d018      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x6c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233a:	d013      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x6c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x6c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_TIM_Base_Start_IT+0xc4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x6c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x6c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d115      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d015      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0xaa>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d011      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e008      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e000      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40013400 	.word	0x40013400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	00010007 	.word	0x00010007

080023cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0202 	mvn.w	r2, #2
 80023f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9cb 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9bd 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f9ce 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0204 	mvn.w	r2, #4
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f9a1 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f993 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f9a4 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d122      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d11b      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0208 	mvn.w	r2, #8
 80024a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2204      	movs	r2, #4
 80024a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f977 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f969 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f97a 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0210 	mvn.w	r2, #16
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2208      	movs	r2, #8
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f94d 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f93f 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f950 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0201 	mvn.w	r2, #1
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe f8b4 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b80      	cmp	r3, #128	; 0x80
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 faea 	bl	8002b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258a:	d10e      	bne.n	80025aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d107      	bne.n	80025aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fadd 	bl	8002b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d10e      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f8fe 	bl	80027d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d10e      	bne.n	8002602 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0220 	mvn.w	r2, #32
 80025fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fa9d 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_TIM_ConfigClockSource+0x18>
 800261e:	2302      	movs	r3, #2
 8002620:	e0b5      	b.n	800278e <HAL_TIM_ConfigClockSource+0x184>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002644:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800264c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	d03e      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xd4>
 8002660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002664:	f200 8087 	bhi.w	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	f000 8085 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x170>
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	d87f      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 8002676:	2b70      	cmp	r3, #112	; 0x70
 8002678:	d01a      	beq.n	80026b0 <HAL_TIM_ConfigClockSource+0xa6>
 800267a:	2b70      	cmp	r3, #112	; 0x70
 800267c:	d87b      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 800267e:	2b60      	cmp	r3, #96	; 0x60
 8002680:	d050      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x11a>
 8002682:	2b60      	cmp	r3, #96	; 0x60
 8002684:	d877      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 8002686:	2b50      	cmp	r3, #80	; 0x50
 8002688:	d03c      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0xfa>
 800268a:	2b50      	cmp	r3, #80	; 0x50
 800268c:	d873      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d058      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0x13a>
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d86f      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 8002696:	2b30      	cmp	r3, #48	; 0x30
 8002698:	d064      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x15a>
 800269a:	2b30      	cmp	r3, #48	; 0x30
 800269c:	d86b      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d060      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x15a>
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d867      	bhi.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d05c      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x15a>
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d05a      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026ae:	e062      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f000 f99c 	bl	80029fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e04e      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f000 f985 	bl	80029fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	609a      	str	r2, [r3, #8]
      break;
 8002702:	e03b      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	461a      	mov	r2, r3
 8002712:	f000 f8f9 	bl	8002908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2150      	movs	r1, #80	; 0x50
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f952 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 8002722:	e02b      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f000 f918 	bl	8002966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2160      	movs	r1, #96	; 0x60
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f942 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 8002742:	e01b      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	461a      	mov	r2, r3
 8002752:	f000 f8d9 	bl	8002908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f932 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 8002762:	e00b      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f000 f929 	bl	80029c6 <TIM_ITRx_SetConfig>
        break;
 8002774:	e002      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002776:	bf00      	nop
 8002778:	e000      	b.n	800277c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800277a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3c      	ldr	r2, [pc, #240]	; (80028ec <TIM_Base_SetConfig+0x104>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00f      	beq.n	8002820 <TIM_Base_SetConfig+0x38>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d00b      	beq.n	8002820 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <TIM_Base_SetConfig+0x108>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x38>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <TIM_Base_SetConfig+0x10c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x38>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <TIM_Base_SetConfig+0x104>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01b      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d017      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <TIM_Base_SetConfig+0x108>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a29      	ldr	r2, [pc, #164]	; (80028f4 <TIM_Base_SetConfig+0x10c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00f      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <TIM_Base_SetConfig+0x114>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <TIM_Base_SetConfig+0x118>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <TIM_Base_SetConfig+0x104>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00f      	beq.n	80028d0 <TIM_Base_SetConfig+0xe8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <TIM_Base_SetConfig+0x110>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0xe8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <TIM_Base_SetConfig+0x114>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0xe8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <TIM_Base_SetConfig+0x118>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0xe8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	615a      	str	r2, [r3, #20]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40013400 	.word	0x40013400
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400
 8002904:	40014800 	.word	0x40014800

08002908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f023 030a 	bic.w	r3, r3, #10
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002966:	b480      	push	{r7}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	031b      	lsls	r3, r3, #12
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	621a      	str	r2, [r3, #32]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f043 0307 	orr.w	r3, r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	021a      	lsls	r2, r3, #8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e063      	b.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2a      	ldr	r2, [pc, #168]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d013      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40013400 	.word	0x40013400
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40014000 	.word	0x40014000

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LcdInit>:
static void LcdWriteNibble(uint8_t lcdData);
static void LcdWriteCmd(uint8_t lcdCmd);
static void LcdWriteData(uint8_t lcdData);

void LcdInit(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4823      	ldr	r0, [pc, #140]	; (8002c10 <LcdInit+0x98>)
 8002b82:	f7fe f999 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4821      	ldr	r0, [pc, #132]	; (8002c10 <LcdInit+0x98>)
 8002b8c:	f7fe f994 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2104      	movs	r1, #4
 8002b94:	481e      	ldr	r0, [pc, #120]	; (8002c10 <LcdInit+0x98>)
 8002b96:	f7fe f98f 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	481d      	ldr	r0, [pc, #116]	; (8002c14 <LcdInit+0x9c>)
 8002ba0:	f7fe f98a 	bl	8000eb8 <HAL_GPIO_WritePin>

	HAL_Delay(15);
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f7fd ff07 	bl	80009b8 <HAL_Delay>

	LcdWriteNibble(0x30);
 8002baa:	2030      	movs	r0, #48	; 0x30
 8002bac:	f000 f886 	bl	8002cbc <LcdWriteNibble>
	HAL_Delay(5);
 8002bb0:	2005      	movs	r0, #5
 8002bb2:	f7fd ff01 	bl	80009b8 <HAL_Delay>

	LcdWriteNibble(0x30);
 8002bb6:	2030      	movs	r0, #48	; 0x30
 8002bb8:	f000 f880 	bl	8002cbc <LcdWriteNibble>
	delay_us(100);
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	f7fd fccd 	bl	800055c <delay_us>
	//HAL_Delay(1);

	LcdWriteNibble(0x30);
 8002bc2:	2030      	movs	r0, #48	; 0x30
 8002bc4:	f000 f87a 	bl	8002cbc <LcdWriteNibble>
	delay_us(100);
 8002bc8:	2064      	movs	r0, #100	; 0x64
 8002bca:	f7fd fcc7 	bl	800055c <delay_us>
	//HAL_Delay(1);

	LcdWriteNibble(0x20);
 8002bce:	2020      	movs	r0, #32
 8002bd0:	f000 f874 	bl	8002cbc <LcdWriteNibble>
	delay_us(100);
 8002bd4:	2064      	movs	r0, #100	; 0x64
 8002bd6:	f7fd fcc1 	bl	800055c <delay_us>
	//HAL_Delay(1);

	LcdWriteCmd(0x28);
 8002bda:	2028      	movs	r0, #40	; 0x28
 8002bdc:	f000 f8ce 	bl	8002d7c <LcdWriteCmd>
	delay_us(39);
 8002be0:	2027      	movs	r0, #39	; 0x27
 8002be2:	f7fd fcbb 	bl	800055c <delay_us>
	//HAL_Delay(1);

	LcdWriteCmd(0x0F);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f8c8 	bl	8002d7c <LcdWriteCmd>
	delay_us(39);
 8002bec:	2027      	movs	r0, #39	; 0x27
 8002bee:	f7fd fcb5 	bl	800055c <delay_us>
	//HAL_Delay(1);

	LcdWriteCmd(0x01);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 f8c2 	bl	8002d7c <LcdWriteCmd>
	HAL_Delay(2);
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f7fd fedd 	bl	80009b8 <HAL_Delay>

	LcdWriteCmd(0x06);
 8002bfe:	2006      	movs	r0, #6
 8002c00:	f000 f8bc 	bl	8002d7c <LcdWriteCmd>
	delay_us(39);
 8002c04:	2027      	movs	r0, #39	; 0x27
 8002c06:	f7fd fca9 	bl	800055c <delay_us>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	48000400 	.word	0x48000400
 8002c14:	48001000 	.word	0x48001000

08002c18 <LcdSetPosition>:
{
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,status == LCD_BACKLIGHT_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void LcdSetPosition(uint8_t line, uint8_t pos)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460a      	mov	r2, r1
 8002c22:	71fb      	strb	r3, [r7, #7]
 8002c24:	4613      	mov	r3, r2
 8002c26:	71bb      	strb	r3, [r7, #6]
	if( line == LCD_LINE_1 )
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <LcdSetPosition+0x1c>
	{
		line = 0x00 ;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	71fb      	strb	r3, [r7, #7]
 8002c32:	e004      	b.n	8002c3e <LcdSetPosition+0x26>
	}
	else if( line == LCD_LINE_2 )
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <LcdSetPosition+0x26>
	{
		line = 0x40 ;
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	71fb      	strb	r3, [r7, #7]
	}

	pos = pos % 16 ;
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = line & 0xF0 | pos & 0x0F ;
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	f023 030f 	bic.w	r3, r3, #15
 8002c4e:	b25a      	sxtb	r2, r3
 8002c50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	73fb      	strb	r3, [r7, #15]
	LcdWriteCmd(cmd | 0x80);
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f887 	bl	8002d7c <LcdWriteCmd>
	delay_us(39);
 8002c6e:	2027      	movs	r0, #39	; 0x27
 8002c70:	f7fd fc74 	bl	800055c <delay_us>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <LcdPutS>:
	LcdWriteData(c);
	delay_us(43);
}

void LcdPutS(char *s)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
	while(s[i] != '\0'){
 8002c88:	e00c      	b.n	8002ca4 <LcdPutS+0x28>
		LcdWriteData(s[i]);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f890 	bl	8002db8 <LcdWriteData>
		delay_us(43);
 8002c98:	202b      	movs	r0, #43	; 0x2b
 8002c9a:	f7fd fc5f 	bl	800055c <delay_us>
		i++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
	while(s[i] != '\0'){
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ec      	bne.n	8002c8a <LcdPutS+0xe>
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <LcdWriteNibble>:

static void LcdWriteNibble(uint8_t data)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
	int i[6] = {0,0,0,0,0,0};
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	615a      	str	r2, [r3, #20]

	i[0] = (data & 0x80) >> 7;
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	09db      	lsrs	r3, r3, #7
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	60bb      	str	r3, [r7, #8]
	i[1] = (data & 0x40) >> 6;
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	119b      	asrs	r3, r3, #6
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
	i[2] = (data & 0x20) >> 5;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	115b      	asrs	r3, r3, #5
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
	i[3] = (data & 0x10) >> 4;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	111b      	asrs	r3, r3, #4
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]


	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,i[0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2108      	movs	r1, #8
 8002d0e:	4819      	ldr	r0, [pc, #100]	; (8002d74 <LcdWriteNibble+0xb8>)
 8002d10:	f7fe f8d2 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,i[1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	2104      	movs	r1, #4
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <LcdWriteNibble+0xb8>)
 8002d26:	f7fe f8c7 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,i[2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	2102      	movs	r1, #2
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <LcdWriteNibble+0xb8>)
 8002d3c:	f7fe f8bc 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,i[3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4808      	ldr	r0, [pc, #32]	; (8002d74 <LcdWriteNibble+0xb8>)
 8002d52:	f7fe f8b1 	bl	8000eb8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2104      	movs	r1, #4
 8002d5a:	4807      	ldr	r0, [pc, #28]	; (8002d78 <LcdWriteNibble+0xbc>)
 8002d5c:	f7fe f8ac 	bl	8000eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2104      	movs	r1, #4
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <LcdWriteNibble+0xbc>)
 8002d66:	f7fe f8a7 	bl	8000eb8 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	48000800 	.word	0x48000800
 8002d78:	48000400 	.word	0x48000400

08002d7c <LcdWriteCmd>:

static void LcdWriteCmd(uint8_t cmd)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2101      	movs	r1, #1
 8002d8a:	480a      	ldr	r0, [pc, #40]	; (8002db4 <LcdWriteCmd+0x38>)
 8002d8c:	f7fe f894 	bl	8000eb8 <HAL_GPIO_WritePin>

	LcdWriteNibble(cmd & 0xF0);
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f023 030f 	bic.w	r3, r3, #15
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff8f 	bl	8002cbc <LcdWriteNibble>
	LcdWriteNibble(cmd << 4);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff89 	bl	8002cbc <LcdWriteNibble>

}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	48000400 	.word	0x48000400

08002db8 <LcdWriteData>:

static void LcdWriteData(uint8_t data)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	480b      	ldr	r0, [pc, #44]	; (8002df4 <LcdWriteData+0x3c>)
 8002dc8:	f7fe f876 	bl	8000eb8 <HAL_GPIO_WritePin>
	LcdWriteNibble(data & 0xF0);
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f023 030f 	bic.w	r3, r3, #15
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff71 	bl	8002cbc <LcdWriteNibble>
	LcdWriteNibble(data << 4);
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff6b 	bl	8002cbc <LcdWriteNibble>
	delay_us(43);
 8002de6:	202b      	movs	r0, #43	; 0x2b
 8002de8:	f7fd fbb8 	bl	800055c <delay_us>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	48000400 	.word	0x48000400

08002df8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dfe:	f3ef 8305 	mrs	r3, IPSR
 8002e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <osKernelInitialize+0x32>
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <osKernelInitialize+0x64>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d109      	bne.n	8002e32 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e22:	603b      	str	r3, [r7, #0]
  return(result);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e2a:	f06f 0305 	mvn.w	r3, #5
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e00c      	b.n	8002e4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <osKernelInitialize+0x64>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d105      	bne.n	8002e46 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <osKernelInitialize+0x64>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e002      	b.n	8002e4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000094 	.word	0x20000094

08002e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b092      	sub	sp, #72	; 0x48
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e70:	f3ef 8305 	mrs	r3, IPSR
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8094 	bne.w	8002fa6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e82:	623b      	str	r3, [r7, #32]
  return(result);
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 808d 	bne.w	8002fa6 <osThreadNew+0x146>
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <osThreadNew+0x150>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d106      	bne.n	8002ea2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e94:	f3ef 8311 	mrs	r3, BASEPRI
 8002e98:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8082 	bne.w	8002fa6 <osThreadNew+0x146>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d07e      	beq.n	8002fa6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002eac:	2318      	movs	r3, #24
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002eb4:	f107 031b 	add.w	r3, r7, #27
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d045      	beq.n	8002f52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <osThreadNew+0x74>
        name = attr->name;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <osThreadNew+0x9a>
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	2b38      	cmp	r3, #56	; 0x38
 8002eec:	d805      	bhi.n	8002efa <osThreadNew+0x9a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <osThreadNew+0x9e>
        return (NULL);
 8002efa:	2300      	movs	r3, #0
 8002efc:	e054      	b.n	8002fa8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <osThreadNew+0xd4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b5b      	cmp	r3, #91	; 0x5b
 8002f1c:	d90a      	bls.n	8002f34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <osThreadNew+0xd4>
        mem = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f32:	e010      	b.n	8002f56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10c      	bne.n	8002f56 <osThreadNew+0xf6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d108      	bne.n	8002f56 <osThreadNew+0xf6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <osThreadNew+0xf6>
          mem = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f50:	e001      	b.n	8002f56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d110      	bne.n	8002f7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f64:	9202      	str	r2, [sp, #8]
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 ff7c 	bl	8003e70 <xTaskCreateStatic>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e013      	b.n	8002fa6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d110      	bne.n	8002fa6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 ffc6 	bl	8003f28 <xTaskCreate>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <osThreadNew+0x146>
          hTask = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fa6:	697b      	ldr	r3, [r7, #20]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3738      	adds	r7, #56	; 0x38
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000094 	.word	0x20000094

08002fb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fbc:	f3ef 8305 	mrs	r3, IPSR
 8002fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8002fc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10f      	bne.n	8002fe8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <osDelay+0x34>
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <osDelay+0x58>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d109      	bne.n	8002ff0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <osDelay+0x3c>
    stat = osErrorISR;
 8002fe8:	f06f 0305 	mvn.w	r3, #5
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e007      	b.n	8003000 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 f8d0 	bl	80041a0 <vTaskDelay>
    }
  }

  return (stat);
 8003000:	697b      	ldr	r3, [r7, #20]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000094 	.word	0x20000094

08003010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <vApplicationGetIdleTaskMemory+0x2c>)
 8003020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <vApplicationGetIdleTaskMemory+0x30>)
 8003026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000098 	.word	0x20000098
 8003040:	200000f4 	.word	0x200000f4

08003044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <vApplicationGetTimerTaskMemory+0x2c>)
 8003054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <vApplicationGetTimerTaskMemory+0x30>)
 800305a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	200002f4 	.word	0x200002f4
 8003074:	20000350 	.word	0x20000350

08003078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 0208 	add.w	r2, r3, #8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 0208 	add.w	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d103      	bne.n	800313a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e00c      	b.n	8003154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3308      	adds	r3, #8
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <vListInsert+0x2e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d2f6      	bcs.n	8003142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d103      	bne.n	80031c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800320a:	f002 fa73 	bl	80056f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	3b01      	subs	r3, #1
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d114      	bne.n	800328a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01a      	beq.n	800329e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3310      	adds	r3, #16
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fa59 	bl	8004724 <xTaskRemoveFromEventList>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <xQueueGenericReset+0xcc>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	e009      	b.n	800329e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3310      	adds	r3, #16
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fef2 	bl	8003078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff feed 	bl	8003078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800329e:	f002 fa59 	bl	8005754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <xQueueGenericCreateStatic+0x52>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <xQueueGenericCreateStatic+0x56>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericCreateStatic+0x58>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	623b      	str	r3, [r7, #32]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <xQueueGenericCreateStatic+0x7e>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueGenericCreateStatic+0x82>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueGenericCreateStatic+0x84>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61fb      	str	r3, [r7, #28]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800334e:	2350      	movs	r3, #80	; 0x50
 8003350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d00a      	beq.n	800336e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	61bb      	str	r3, [r7, #24]
}
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003380:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f843 	bl	800341a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003396:	4618      	mov	r0, r3
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	613b      	str	r3, [r7, #16]
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e004      	b.n	80033de <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3350      	adds	r3, #80	; 0x50
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 faa8 	bl	8005938 <pvPortMalloc>
 80033e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00f      	beq.n	8003410 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3350      	adds	r3, #80	; 0x50
 80033f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033fe:	79fa      	ldrb	r2, [r7, #7]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f805 	bl	800341a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003410:	69bb      	ldr	r3, [r7, #24]
	}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e002      	b.n	800343c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003448:	2101      	movs	r1, #1
 800344a:	69b8      	ldr	r0, [r7, #24]
 800344c:	f7ff fec8 	bl	80031e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800346e:	2300      	movs	r3, #0
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xQueueGenericSend+0x32>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <xQueueGenericSend+0x40>
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <xQueueGenericSend+0x44>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <xQueueGenericSend+0x46>
 80034a4:	2300      	movs	r3, #0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <xQueueGenericSend+0x60>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d103      	bne.n	80034ce <xQueueGenericSend+0x6e>
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <xQueueGenericSend+0x72>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueGenericSend+0x74>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueGenericSend+0x8e>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	623b      	str	r3, [r7, #32]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ee:	f001 fadd 	bl	8004aac <xTaskGetSchedulerState>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xQueueGenericSend+0x9e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueGenericSend+0xa2>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueGenericSend+0xa4>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericSend+0xbe>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61fb      	str	r3, [r7, #28]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351e:	f002 f8e9 	bl	80056f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <xQueueGenericSend+0xd4>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d129      	bne.n	8003588 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fb2b 	bl	8003b94 <prvCopyDataToQueue>
 800353e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	3324      	adds	r3, #36	; 0x24
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f8e9 	bl	8004724 <xTaskRemoveFromEventList>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003558:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <xQueueGenericSend+0x1f8>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	e00a      	b.n	8003580 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <xQueueGenericSend+0x1f8>)
 8003572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003580:	f002 f8e8 	bl	8005754 <vPortExitCritical>
				return pdPASS;
 8003584:	2301      	movs	r3, #1
 8003586:	e063      	b.n	8003650 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800358e:	f002 f8e1 	bl	8005754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003592:	2300      	movs	r3, #0
 8003594:	e05c      	b.n	8003650 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 f923 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035aa:	f002 f8d3 	bl	8005754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ae:	f000 fe91 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035b2:	f002 f89f 	bl	80056f4 <vPortEnterCritical>
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d103      	bne.n	80035cc <xQueueGenericSend+0x16c>
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x182>
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e2:	f002 f8b7 	bl	8005754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035e6:	1d3a      	adds	r2, r7, #4
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f912 	bl	8004818 <xTaskCheckForTimeOut>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d124      	bne.n	8003644 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fc:	f000 fbc2 	bl	8003d84 <prvIsQueueFull>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	3310      	adds	r3, #16
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f838 	bl	8004684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003616:	f000 fb4d 	bl	8003cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800361a:	f000 fe69 	bl	80042f0 <xTaskResumeAll>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f af7c 	bne.w	800351e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <xQueueGenericSend+0x1f8>)
 8003628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	e772      	b.n	800351e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800363a:	f000 fb3b 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800363e:	f000 fe57 	bl	80042f0 <xTaskResumeAll>
 8003642:	e76c      	b.n	800351e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003646:	f000 fb35 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800364a:	f000 fe51 	bl	80042f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800364e:	2300      	movs	r3, #0
		}
	}
}
 8003650:	4618      	mov	r0, r3
 8003652:	3738      	adds	r7, #56	; 0x38
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08e      	sub	sp, #56	; 0x38
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d103      	bne.n	8003698 <xQueueGenericSendFromISR+0x3c>
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <xQueueGenericSendFromISR+0x40>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <xQueueGenericSendFromISR+0x42>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	623b      	str	r3, [r7, #32]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d103      	bne.n	80036c6 <xQueueGenericSendFromISR+0x6a>
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <xQueueGenericSendFromISR+0x6e>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueGenericSendFromISR+0x70>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036e6:	f002 f8e7 	bl	80058b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ea:	f3ef 8211 	mrs	r2, BASEPRI
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	61ba      	str	r2, [r7, #24]
 8003700:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003702:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <xQueueGenericSendFromISR+0xbc>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d12c      	bne.n	8003772 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003728:	f000 fa34 	bl	8003b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800372c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d112      	bne.n	800375c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	3324      	adds	r3, #36	; 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffee 	bl	8004724 <xTaskRemoveFromEventList>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e007      	b.n	800376c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800375c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003760:	3301      	adds	r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	b25a      	sxtb	r2, r3
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800376c:	2301      	movs	r3, #1
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003770:	e001      	b.n	8003776 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003780:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003784:	4618      	mov	r0, r3
 8003786:	3738      	adds	r7, #56	; 0x38
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <xQueueReceive+0x30>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	623b      	str	r3, [r7, #32]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <xQueueReceive+0x3e>
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueReceive+0x42>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueReceive+0x44>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueReceive+0x5e>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61fb      	str	r3, [r7, #28]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ea:	f001 f95f 	bl	8004aac <xTaskGetSchedulerState>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <xQueueReceive+0x6e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <xQueueReceive+0x72>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueReceive+0x74>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <xQueueReceive+0x8e>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	61bb      	str	r3, [r7, #24]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800381a:	f001 ff6b 	bl	80056f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01f      	beq.n	800386a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382e:	f000 fa1b 	bl	8003c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1e5a      	subs	r2, r3, #1
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00f      	beq.n	8003862 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	3310      	adds	r3, #16
 8003846:	4618      	mov	r0, r3
 8003848:	f000 ff6c 	bl	8004724 <xTaskRemoveFromEventList>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003852:	4b3d      	ldr	r3, [pc, #244]	; (8003948 <xQueueReceive+0x1bc>)
 8003854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003862:	f001 ff77 	bl	8005754 <vPortExitCritical>
				return pdPASS;
 8003866:	2301      	movs	r3, #1
 8003868:	e069      	b.n	800393e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003870:	f001 ff70 	bl	8005754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003874:	2300      	movs	r3, #0
 8003876:	e062      	b.n	800393e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ffb2 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800388c:	f001 ff62 	bl	8005754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003890:	f000 fd20 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003894:	f001 ff2e 	bl	80056f4 <vPortEnterCritical>
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d103      	bne.n	80038ae <xQueueReceive+0x122>
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d103      	bne.n	80038c4 <xQueueReceive+0x138>
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038c4:	f001 ff46 	bl	8005754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c8:	1d3a      	adds	r2, r7, #4
 80038ca:	f107 0310 	add.w	r3, r7, #16
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ffa1 	bl	8004818 <xTaskCheckForTimeOut>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d123      	bne.n	8003924 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038de:	f000 fa3b 	bl	8003d58 <prvIsQueueEmpty>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	3324      	adds	r3, #36	; 0x24
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fec7 	bl	8004684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f8:	f000 f9dc 	bl	8003cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038fc:	f000 fcf8 	bl	80042f0 <xTaskResumeAll>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d189      	bne.n	800381a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <xQueueReceive+0x1bc>)
 8003908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	e780      	b.n	800381a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391a:	f000 f9cb 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800391e:	f000 fce7 	bl	80042f0 <xTaskResumeAll>
 8003922:	e77a      	b.n	800381a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003926:	f000 f9c5 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800392a:	f000 fce1 	bl	80042f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800392e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003930:	f000 fa12 	bl	8003d58 <prvIsQueueEmpty>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f43f af6f 	beq.w	800381a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800393c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800393e:	4618      	mov	r0, r3
 8003940:	3730      	adds	r7, #48	; 0x30
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	; 0x38
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	623b      	str	r3, [r7, #32]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	61fb      	str	r3, [r7, #28]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800399c:	f001 f886 	bl	8004aac <xTaskGetSchedulerState>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <xQueueSemaphoreTake+0x60>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <xQueueSemaphoreTake+0x64>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <xQueueSemaphoreTake+0x66>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61bb      	str	r3, [r7, #24]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80039cc:	f001 fe92 	bl	80056f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d024      	beq.n	8003a26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80039ec:	f001 f9de 	bl	8004dac <pvTaskIncrementMutexHeldCount>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00f      	beq.n	8003a1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	3310      	adds	r3, #16
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fe8e 	bl	8004724 <xTaskRemoveFromEventList>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a0e:	4b54      	ldr	r3, [pc, #336]	; (8003b60 <xQueueSemaphoreTake+0x214>)
 8003a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a1e:	f001 fe99 	bl	8005754 <vPortExitCritical>
				return pdPASS;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e097      	b.n	8003b56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	617b      	str	r3, [r7, #20]
}
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a48:	f001 fe84 	bl	8005754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e082      	b.n	8003b56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fec6 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a64:	f001 fe76 	bl	8005754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a68:	f000 fc34 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a6c:	f001 fe42 	bl	80056f4 <vPortEnterCritical>
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d103      	bne.n	8003a86 <xQueueSemaphoreTake+0x13a>
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d103      	bne.n	8003a9c <xQueueSemaphoreTake+0x150>
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	f001 fe5a 	bl	8005754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 feb5 	bl	8004818 <xTaskCheckForTimeOut>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d132      	bne.n	8003b1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ab6:	f000 f94f 	bl	8003d58 <prvIsQueueEmpty>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d026      	beq.n	8003b0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ac8:	f001 fe14 	bl	80056f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f809 	bl	8004ae8 <xTaskPriorityInherit>
 8003ad6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ad8:	f001 fe3c 	bl	8005754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fdcd 	bl	8004684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aec:	f000 f8e2 	bl	8003cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003af0:	f000 fbfe 	bl	80042f0 <xTaskResumeAll>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f47f af68 	bne.w	80039cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <xQueueSemaphoreTake+0x214>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	e75e      	b.n	80039cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b10:	f000 f8d0 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b14:	f000 fbec 	bl	80042f0 <xTaskResumeAll>
 8003b18:	e758      	b.n	80039cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b1c:	f000 f8ca 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b20:	f000 fbe6 	bl	80042f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b26:	f000 f917 	bl	8003d58 <prvIsQueueEmpty>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f43f af4d 	beq.w	80039cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003b38:	f001 fddc 	bl	80056f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b3e:	f000 f811 	bl	8003b64 <prvGetDisinheritPriorityAfterTimeout>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f8a8 	bl	8004ca0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b50:	f001 fe00 	bl	8005754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3738      	adds	r7, #56	; 0x38
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e001      	b.n	8003b86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b86:	68fb      	ldr	r3, [r7, #12]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d14d      	bne.n	8003c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f800 	bl	8004bc4 <xTaskPriorityDisinherit>
 8003bc4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	e043      	b.n	8003c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d119      	bne.n	8003c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6898      	ldr	r0, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	f002 f8ae 	bl	8005d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d32b      	bcc.n	8003c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	e026      	b.n	8003c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68d8      	ldr	r0, [r3, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	461a      	mov	r2, r3
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	f002 f894 	bl	8005d40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	425b      	negs	r3, r3
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d207      	bcs.n	8003c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d105      	bne.n	8003c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c5e:	697b      	ldr	r3, [r7, #20]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d303      	bcc.n	8003c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f002 f84a 	bl	8005d40 <memcpy>
	}
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cbc:	f001 fd1a 	bl	80056f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc8:	e011      	b.n	8003cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3324      	adds	r3, #36	; 0x24
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd24 	bl	8004724 <xTaskRemoveFromEventList>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ce2:	f000 fdfb 	bl	80048dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dce9      	bgt.n	8003cca <prvUnlockQueue+0x16>
 8003cf6:	e000      	b.n	8003cfa <prvUnlockQueue+0x46>
					break;
 8003cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d02:	f001 fd27 	bl	8005754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d06:	f001 fcf5 	bl	80056f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d12:	e011      	b.n	8003d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3310      	adds	r3, #16
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fcff 	bl	8004724 <xTaskRemoveFromEventList>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d2c:	f000 fdd6 	bl	80048dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d30:	7bbb      	ldrb	r3, [r7, #14]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dce9      	bgt.n	8003d14 <prvUnlockQueue+0x60>
 8003d40:	e000      	b.n	8003d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d4c:	f001 fd02 	bl	8005754 <vPortExitCritical>
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d60:	f001 fcc8 	bl	80056f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e001      	b.n	8003d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d76:	f001 fced 	bl	8005754 <vPortExitCritical>

	return xReturn;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d8c:	f001 fcb2 	bl	80056f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d102      	bne.n	8003da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e001      	b.n	8003da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003da6:	f001 fcd5 	bl	8005754 <vPortExitCritical>

	return xReturn;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e014      	b.n	8003dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	; (8003e04 <vQueueAddToRegistry+0x50>)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dd0:	490c      	ldr	r1, [pc, #48]	; (8003e04 <vQueueAddToRegistry+0x50>)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <vQueueAddToRegistry+0x50>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003de6:	e006      	b.n	8003df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d9e7      	bls.n	8003dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20001a48 	.word	0x20001a48

08003e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e18:	f001 fc6c 	bl	80056f4 <vPortEnterCritical>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d103      	bne.n	8003e32 <vQueueWaitForMessageRestricted+0x2a>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d103      	bne.n	8003e48 <vQueueWaitForMessageRestricted+0x40>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e48:	f001 fc84 	bl	8005754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3324      	adds	r3, #36	; 0x24
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fc35 	bl	80046cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff26 	bl	8003cb4 <prvUnlockQueue>
	}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	; 0x38
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	623b      	str	r3, [r7, #32]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	61fb      	str	r3, [r7, #28]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eb6:	235c      	movs	r3, #92	; 0x5c
 8003eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8003ebe:	d00a      	beq.n	8003ed6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	61bb      	str	r3, [r7, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01e      	beq.n	8003f1a <xTaskCreateStatic+0xaa>
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01b      	beq.n	8003f1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f850 	bl	8003fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f14:	f000 f8d4 	bl	80040c0 <prvAddNewTaskToReadyList>
 8003f18:	e001      	b.n	8003f1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f1e:	697b      	ldr	r3, [r7, #20]
	}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	; 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af04      	add	r7, sp, #16
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fcfb 	bl	8005938 <pvPortMalloc>
 8003f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f4a:	205c      	movs	r0, #92	; 0x5c
 8003f4c:	f001 fcf4 	bl	8005938 <pvPortMalloc>
 8003f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5e:	e005      	b.n	8003f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f001 fdad 	bl	8005ac0 <vPortFree>
 8003f66:	e001      	b.n	8003f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d017      	beq.n	8003fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9303      	str	r3, [sp, #12]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f80e 	bl	8003fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f96:	69f8      	ldr	r0, [r7, #28]
 8003f98:	f000 f892 	bl	80040c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e002      	b.n	8003fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	21a5      	movs	r1, #165	; 0xa5
 8003fcc:	f001 fec6 	bl	8005d5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f023 0307 	bic.w	r3, r3, #7
 8003fe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	617b      	str	r3, [r7, #20]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e012      	b.n	8004036 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	7819      	ldrb	r1, [r3, #0]
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	3334      	adds	r3, #52	; 0x34
 8004020:	460a      	mov	r2, r1
 8004022:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b0f      	cmp	r3, #15
 800403a:	d9e9      	bls.n	8004010 <prvInitialiseNewTask+0x5e>
 800403c:	e000      	b.n	8004040 <prvInitialiseNewTask+0x8e>
		{
			break;
 800403e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b37      	cmp	r3, #55	; 0x37
 800404c:	d901      	bls.n	8004052 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800404e:	2337      	movs	r3, #55	; 0x37
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff f825 	bl	80030b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	3318      	adds	r3, #24
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff f820 	bl	80030b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	69b8      	ldr	r0, [r7, #24]
 80040a2:	f001 f9fd 	bl	80054a0 <pxPortInitialiseStack>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b8:	bf00      	nop
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c8:	f001 fb14 	bl	80056f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d110      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040ec:	f000 fc1a 	bl	8004924 <prvInitialiseTaskLists>
 80040f0:	e00d      	b.n	800410e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040fa:	4b23      	ldr	r3, [pc, #140]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d802      	bhi.n	800410e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d903      	bls.n	8004134 <prvAddNewTaskToReadyList+0x74>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvAddNewTaskToReadyList+0xd8>)
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f7fe ffc1 	bl	80030d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004150:	f001 fb00 	bl	8005754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	429a      	cmp	r2, r3
 8004168:	d207      	bcs.n	800417a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <prvAddNewTaskToReadyList+0xdc>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000c24 	.word	0x20000c24
 8004188:	20000750 	.word	0x20000750
 800418c:	20000c30 	.word	0x20000c30
 8004190:	20000c40 	.word	0x20000c40
 8004194:	20000c2c 	.word	0x20000c2c
 8004198:	20000754 	.word	0x20000754
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <vTaskDelay+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <vTaskDelay+0x30>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041d0:	f000 f880 	bl	80042d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041d4:	2100      	movs	r1, #0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fdfc 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041dc:	f000 f888 	bl	80042f0 <xTaskResumeAll>
 80041e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <vTaskDelay+0x64>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000c4c 	.word	0x20000c4c
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004216:	463a      	mov	r2, r7
 8004218:	1d39      	adds	r1, r7, #4
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fef6 	bl	8003010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	460a      	mov	r2, r1
 8004236:	4921      	ldr	r1, [pc, #132]	; (80042bc <vTaskStartScheduler+0xb4>)
 8004238:	4821      	ldr	r0, [pc, #132]	; (80042c0 <vTaskStartScheduler+0xb8>)
 800423a:	f7ff fe19 	bl	8003e70 <xTaskCreateStatic>
 800423e:	4603      	mov	r3, r0
 8004240:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <vTaskStartScheduler+0xbc>)
 8004242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <vTaskStartScheduler+0xbc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e001      	b.n	8004256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800425c:	f000 fe0e 	bl	8004e7c <xTimerCreateTimerTask>
 8004260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d116      	bne.n	8004296 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
}
 800427a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <vTaskStartScheduler+0xc0>)
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <vTaskStartScheduler+0xc4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <vTaskStartScheduler+0xc8>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004290:	f001 f98e 	bl	80055b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004294:	e00e      	b.n	80042b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d10a      	bne.n	80042b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <vTaskStartScheduler+0xaa>
}
 80042b4:	bf00      	nop
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08006620 	.word	0x08006620
 80042c0:	080048f5 	.word	0x080048f5
 80042c4:	20000c48 	.word	0x20000c48
 80042c8:	20000c44 	.word	0x20000c44
 80042cc:	20000c30 	.word	0x20000c30
 80042d0:	20000c28 	.word	0x20000c28

080042d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <vTaskSuspendAll+0x18>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a03      	ldr	r2, [pc, #12]	; (80042ec <vTaskSuspendAll+0x18>)
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000c4c 	.word	0x20000c4c

080042f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fe:	4b42      	ldr	r3, [pc, #264]	; (8004408 <xTaskResumeAll+0x118>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskResumeAll+0x2c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	603b      	str	r3, [r7, #0]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800431c:	f001 f9ea 	bl	80056f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004320:	4b39      	ldr	r3, [pc, #228]	; (8004408 <xTaskResumeAll+0x118>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	4a38      	ldr	r2, [pc, #224]	; (8004408 <xTaskResumeAll+0x118>)
 8004328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <xTaskResumeAll+0x118>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d162      	bne.n	80043f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <xTaskResumeAll+0x11c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d05e      	beq.n	80043f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433a:	e02f      	b.n	800439c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <xTaskResumeAll+0x120>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3318      	adds	r3, #24
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe ff1f 	bl	800318c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe ff1a 	bl	800318c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <xTaskResumeAll+0x124>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d903      	bls.n	800436c <xTaskResumeAll+0x7c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <xTaskResumeAll+0x124>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <xTaskResumeAll+0x128>)
 800437a:	441a      	add	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fe fea5 	bl	80030d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4b23      	ldr	r3, [pc, #140]	; (800441c <xTaskResumeAll+0x12c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <xTaskResumeAll+0x130>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <xTaskResumeAll+0x120>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1cb      	bne.n	800433c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043aa:	f000 fb59 	bl	8004a60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <xTaskResumeAll+0x134>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ba:	f000 f847 	bl	800444c <xTaskIncrementTick>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <xTaskResumeAll+0x130>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f1      	bne.n	80043ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <xTaskResumeAll+0x134>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <xTaskResumeAll+0x130>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <xTaskResumeAll+0x138>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f8:	f001 f9ac 	bl	8005754 <vPortExitCritical>

	return xAlreadyYielded;
 80043fc:	68bb      	ldr	r3, [r7, #8]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000c4c 	.word	0x20000c4c
 800440c:	20000c24 	.word	0x20000c24
 8004410:	20000be4 	.word	0x20000be4
 8004414:	20000c2c 	.word	0x20000c2c
 8004418:	20000754 	.word	0x20000754
 800441c:	20000750 	.word	0x20000750
 8004420:	20000c38 	.word	0x20000c38
 8004424:	20000c34 	.word	0x20000c34
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <xTaskGetTickCount+0x1c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000c28 	.word	0x20000c28

0800444c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <xTaskIncrementTick+0x150>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 808e 	bne.w	800457c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004460:	4b4f      	ldr	r3, [pc, #316]	; (80045a0 <xTaskIncrementTick+0x154>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004468:	4a4d      	ldr	r2, [pc, #308]	; (80045a0 <xTaskIncrementTick+0x154>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d120      	bne.n	80044b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004474:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <xTaskIncrementTick+0x158>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <xTaskIncrementTick+0x48>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <xTaskIncrementTick+0x46>
 8004494:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <xTaskIncrementTick+0x158>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <xTaskIncrementTick+0x15c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a41      	ldr	r2, [pc, #260]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <xTaskIncrementTick+0x15c>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <xTaskIncrementTick+0x160>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <xTaskIncrementTick+0x160>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	f000 fad5 	bl	8004a60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <xTaskIncrementTick+0x164>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d34e      	bcc.n	800455e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c0:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xTaskIncrementTick+0x82>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <xTaskIncrementTick+0x84>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <xTaskIncrementTick+0x164>)
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	601a      	str	r2, [r3, #0]
					break;
 80044dc:	e03f      	b.n	800455e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044de:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d203      	bcs.n	80044fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044f6:	4a2e      	ldr	r2, [pc, #184]	; (80045b0 <xTaskIncrementTick+0x164>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6013      	str	r3, [r2, #0]
						break;
 80044fc:	e02f      	b.n	800455e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3304      	adds	r3, #4
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fe42 	bl	800318c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fe39 	bl	800318c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <xTaskIncrementTick+0x168>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d903      	bls.n	800452e <xTaskIncrementTick+0xe2>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <xTaskIncrementTick+0x168>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a1f      	ldr	r2, [pc, #124]	; (80045b8 <xTaskIncrementTick+0x16c>)
 800453c:	441a      	add	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe fdc4 	bl	80030d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <xTaskIncrementTick+0x170>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d3b3      	bcc.n	80044c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455c:	e7b0      	b.n	80044c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <xTaskIncrementTick+0x170>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	4914      	ldr	r1, [pc, #80]	; (80045b8 <xTaskIncrementTick+0x16c>)
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d907      	bls.n	8004586 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e004      	b.n	8004586 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <xTaskIncrementTick+0x174>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <xTaskIncrementTick+0x174>)
 8004584:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <xTaskIncrementTick+0x178>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004592:	697b      	ldr	r3, [r7, #20]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000c4c 	.word	0x20000c4c
 80045a0:	20000c28 	.word	0x20000c28
 80045a4:	20000bdc 	.word	0x20000bdc
 80045a8:	20000be0 	.word	0x20000be0
 80045ac:	20000c3c 	.word	0x20000c3c
 80045b0:	20000c44 	.word	0x20000c44
 80045b4:	20000c2c 	.word	0x20000c2c
 80045b8:	20000754 	.word	0x20000754
 80045bc:	20000750 	.word	0x20000750
 80045c0:	20000c34 	.word	0x20000c34
 80045c4:	20000c38 	.word	0x20000c38

080045c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ce:	4b28      	ldr	r3, [pc, #160]	; (8004670 <vTaskSwitchContext+0xa8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045d6:	4b27      	ldr	r3, [pc, #156]	; (8004674 <vTaskSwitchContext+0xac>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045dc:	e041      	b.n	8004662 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <vTaskSwitchContext+0xac>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <vTaskSwitchContext+0xb0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e010      	b.n	800460e <vTaskSwitchContext+0x46>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <vTaskSwitchContext+0x40>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <vTaskSwitchContext+0x3e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	491b      	ldr	r1, [pc, #108]	; (800467c <vTaskSwitchContext+0xb4>)
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0e4      	beq.n	80045ec <vTaskSwitchContext+0x24>
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <vTaskSwitchContext+0xb4>)
 800462e:	4413      	add	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3308      	adds	r3, #8
 8004644:	429a      	cmp	r2, r3
 8004646:	d104      	bne.n	8004652 <vTaskSwitchContext+0x8a>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <vTaskSwitchContext+0xb8>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4a06      	ldr	r2, [pc, #24]	; (8004678 <vTaskSwitchContext+0xb0>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6013      	str	r3, [r2, #0]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000c4c 	.word	0x20000c4c
 8004674:	20000c38 	.word	0x20000c38
 8004678:	20000c2c 	.word	0x20000c2c
 800467c:	20000754 	.word	0x20000754
 8004680:	20000750 	.word	0x20000750

08004684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <vTaskPlaceOnEventList+0x44>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3318      	adds	r3, #24
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fd31 	bl	800311a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046b8:	2101      	movs	r1, #1
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	f000 fb8a 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000750 	.word	0x20000750

080046cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <vTaskPlaceOnEventListRestricted+0x54>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3318      	adds	r3, #24
 80046fa:	4619      	mov	r1, r3
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7fe fce8 	bl	80030d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f000 fb5f 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
	}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000750 	.word	0x20000750

08004724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60fb      	str	r3, [r7, #12]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3318      	adds	r3, #24
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fd19 	bl	800318c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <xTaskRemoveFromEventList+0xb0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11d      	bne.n	800479e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fd10 	bl	800318c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <xTaskRemoveFromEventList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <xTaskRemoveFromEventList+0x5c>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <xTaskRemoveFromEventList+0xb4>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <xTaskRemoveFromEventList+0xb8>)
 800478e:	441a      	add	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe fc9b 	bl	80030d2 <vListInsertEnd>
 800479c:	e005      	b.n	80047aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3318      	adds	r3, #24
 80047a2:	4619      	mov	r1, r3
 80047a4:	480e      	ldr	r0, [pc, #56]	; (80047e0 <xTaskRemoveFromEventList+0xbc>)
 80047a6:	f7fe fc94 	bl	80030d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <xTaskRemoveFromEventList+0xc0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d905      	bls.n	80047c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <xTaskRemoveFromEventList+0xc4>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e001      	b.n	80047c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000c4c 	.word	0x20000c4c
 80047d8:	20000c2c 	.word	0x20000c2c
 80047dc:	20000754 	.word	0x20000754
 80047e0:	20000be4 	.word	0x20000be4
 80047e4:	20000750 	.word	0x20000750
 80047e8:	20000c38 	.word	0x20000c38

080047ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <vTaskInternalSetTimeOutState+0x24>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <vTaskInternalSetTimeOutState+0x28>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000c3c 	.word	0x20000c3c
 8004814:	20000c28 	.word	0x20000c28

08004818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	613b      	str	r3, [r7, #16]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800485a:	f000 ff4b 	bl	80056f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <xTaskCheckForTimeOut+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d102      	bne.n	800487e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e023      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <xTaskCheckForTimeOut+0xc0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d007      	beq.n	800489a <xTaskCheckForTimeOut+0x82>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	e015      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d20b      	bcs.n	80048bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff9b 	bl	80047ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e004      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f000 ff45 	bl	8005754 <vPortExitCritical>

	return xReturn;
 80048ca:	69fb      	ldr	r3, [r7, #28]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000c28 	.word	0x20000c28
 80048d8:	20000c3c 	.word	0x20000c3c

080048dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <vTaskMissedYield+0x14>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000c38 	.word	0x20000c38

080048f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048fc:	f000 f852 	bl	80049a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <prvIdleTask+0x28>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d9f9      	bls.n	80048fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <prvIdleTask+0x2c>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004918:	e7f0      	b.n	80048fc <prvIdleTask+0x8>
 800491a:	bf00      	nop
 800491c:	20000754 	.word	0x20000754
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	e00c      	b.n	800494a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <prvInitialiseTaskLists+0x60>)
 800493c:	4413      	add	r3, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fb9a 	bl	8003078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3301      	adds	r3, #1
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b37      	cmp	r3, #55	; 0x37
 800494e:	d9ef      	bls.n	8004930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004950:	480d      	ldr	r0, [pc, #52]	; (8004988 <prvInitialiseTaskLists+0x64>)
 8004952:	f7fe fb91 	bl	8003078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004956:	480d      	ldr	r0, [pc, #52]	; (800498c <prvInitialiseTaskLists+0x68>)
 8004958:	f7fe fb8e 	bl	8003078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800495c:	480c      	ldr	r0, [pc, #48]	; (8004990 <prvInitialiseTaskLists+0x6c>)
 800495e:	f7fe fb8b 	bl	8003078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004962:	480c      	ldr	r0, [pc, #48]	; (8004994 <prvInitialiseTaskLists+0x70>)
 8004964:	f7fe fb88 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004968:	480b      	ldr	r0, [pc, #44]	; (8004998 <prvInitialiseTaskLists+0x74>)
 800496a:	f7fe fb85 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800496e:	4b0b      	ldr	r3, [pc, #44]	; (800499c <prvInitialiseTaskLists+0x78>)
 8004970:	4a05      	ldr	r2, [pc, #20]	; (8004988 <prvInitialiseTaskLists+0x64>)
 8004972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvInitialiseTaskLists+0x7c>)
 8004976:	4a05      	ldr	r2, [pc, #20]	; (800498c <prvInitialiseTaskLists+0x68>)
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000754 	.word	0x20000754
 8004988:	20000bb4 	.word	0x20000bb4
 800498c:	20000bc8 	.word	0x20000bc8
 8004990:	20000be4 	.word	0x20000be4
 8004994:	20000bf8 	.word	0x20000bf8
 8004998:	20000c10 	.word	0x20000c10
 800499c:	20000bdc 	.word	0x20000bdc
 80049a0:	20000be0 	.word	0x20000be0

080049a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049aa:	e019      	b.n	80049e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049ac:	f000 fea2 	bl	80056f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <prvCheckTasksWaitingTermination+0x50>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fbe5 	bl	800318c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <prvCheckTasksWaitingTermination+0x54>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <prvCheckTasksWaitingTermination+0x54>)
 80049ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049d6:	f000 febd 	bl	8005754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f810 	bl	8004a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e1      	bne.n	80049ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000bf8 	.word	0x20000bf8
 80049f8:	20000c24 	.word	0x20000c24
 80049fc:	20000c0c 	.word	0x20000c0c

08004a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f852 	bl	8005ac0 <vPortFree>
				vPortFree( pxTCB );
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 f84f 	bl	8005ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a22:	e018      	b.n	8004a56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d103      	bne.n	8004a36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 f846 	bl	8005ac0 <vPortFree>
	}
 8004a34:	e00f      	b.n	8004a56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d00a      	beq.n	8004a56 <prvDeleteTCB+0x56>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <prvDeleteTCB+0x54>
	}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <prvResetNextTaskUnblockTime+0x44>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <prvResetNextTaskUnblockTime+0x14>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <prvResetNextTaskUnblockTime+0x16>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <prvResetNextTaskUnblockTime+0x48>)
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a82:	e008      	b.n	8004a96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <prvResetNextTaskUnblockTime+0x44>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <prvResetNextTaskUnblockTime+0x48>)
 8004a94:	6013      	str	r3, [r2, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000bdc 	.word	0x20000bdc
 8004aa8:	20000c44 	.word	0x20000c44

08004aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <xTaskGetSchedulerState+0x34>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aba:	2301      	movs	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	e008      	b.n	8004ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <xTaskGetSchedulerState+0x38>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e001      	b.n	8004ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ad2:	687b      	ldr	r3, [r7, #4]
	}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000c30 	.word	0x20000c30
 8004ae4:	20000c4c 	.word	0x20000c4c

08004ae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d056      	beq.n	8004bac <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <xTaskPriorityInherit+0xd0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d246      	bcs.n	8004b9a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db06      	blt.n	8004b22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <xTaskPriorityInherit+0xd0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6959      	ldr	r1, [r3, #20]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <xTaskPriorityInherit+0xd4>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4299      	cmp	r1, r3
 8004b38:	d101      	bne.n	8004b3e <xTaskPriorityInherit+0x56>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <xTaskPriorityInherit+0x58>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fb1f 	bl	800318c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <xTaskPriorityInherit+0xd0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <xTaskPriorityInherit+0xd8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d903      	bls.n	8004b6c <xTaskPriorityInherit+0x84>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <xTaskPriorityInherit+0xd8>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <xTaskPriorityInherit+0xd4>)
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe faa5 	bl	80030d2 <vListInsertEnd>
 8004b88:	e004      	b.n	8004b94 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <xTaskPriorityInherit+0xd0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e008      	b.n	8004bac <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <xTaskPriorityInherit+0xd0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d201      	bcs.n	8004bac <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bac:	68fb      	ldr	r3, [r7, #12]
	}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000750 	.word	0x20000750
 8004bbc:	20000754 	.word	0x20000754
 8004bc0:	20000c2c 	.word	0x20000c2c

08004bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d056      	beq.n	8004c88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <xTaskPriorityDisinherit+0xd0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d00a      	beq.n	8004bfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60bb      	str	r3, [r7, #8]
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d02c      	beq.n	8004c88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d128      	bne.n	8004c88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe faa6 	bl	800318c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <xTaskPriorityDisinherit+0xd4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d903      	bls.n	8004c68 <xTaskPriorityDisinherit+0xa4>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <xTaskPriorityDisinherit+0xd4>)
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <xTaskPriorityDisinherit+0xd8>)
 8004c76:	441a      	add	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7fe fa27 	bl	80030d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c88:	697b      	ldr	r3, [r7, #20]
	}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000750 	.word	0x20000750
 8004c98:	20000c2c 	.word	0x20000c2c
 8004c9c:	20000754 	.word	0x20000754

08004ca0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d06f      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d902      	bls.n	8004ce6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e002      	b.n	8004cec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d050      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d14b      	bne.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d00:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10a      	bne.n	8004d20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60bb      	str	r3, [r7, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db04      	blt.n	8004d3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d101      	bne.n	8004d58 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01c      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fa12 	bl	800318c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4a06      	ldr	r2, [pc, #24]	; (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fe f99d 	bl	80030d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d98:	bf00      	nop
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000750 	.word	0x20000750
 8004da4:	20000754 	.word	0x20000754
 8004da8:	20000c2c 	.word	0x20000c2c

08004dac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
	}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000750 	.word	0x20000750

08004dd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe f9ce 	bl	800318c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d10a      	bne.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4819      	ldr	r0, [pc, #100]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8004e08:	f7fe f963 	bl	80030d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e0c:	e026      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d209      	bcs.n	8004e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe f971 	bl	800311a <vListInsert>
}
 8004e38:	e010      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fe f967 	bl	800311a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d202      	bcs.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000c28 	.word	0x20000c28
 8004e68:	20000750 	.word	0x20000750
 8004e6c:	20000c10 	.word	0x20000c10
 8004e70:	20000be0 	.word	0x20000be0
 8004e74:	20000bdc 	.word	0x20000bdc
 8004e78:	20000c44 	.word	0x20000c44

08004e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e86:	f000 facb 	bl	8005420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <xTimerCreateTimerTask+0x80>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d021      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e9a:	1d3a      	adds	r2, r7, #4
 8004e9c:	f107 0108 	add.w	r1, r7, #8
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe f8cd 	bl	8003044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	9202      	str	r2, [sp, #8]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	460a      	mov	r2, r1
 8004ebc:	4910      	ldr	r1, [pc, #64]	; (8004f00 <xTimerCreateTimerTask+0x84>)
 8004ebe:	4811      	ldr	r0, [pc, #68]	; (8004f04 <xTimerCreateTimerTask+0x88>)
 8004ec0:	f7fe ffd6 	bl	8003e70 <xTaskCreateStatic>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <xTimerCreateTimerTask+0x8c>)
 8004ec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <xTimerCreateTimerTask+0x8c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000c80 	.word	0x20000c80
 8004f00:	08006628 	.word	0x08006628
 8004f04:	08005029 	.word	0x08005029
 8004f08:	20000c84 	.word	0x20000c84

08004f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <xTimerGenericCommand+0x98>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02a      	beq.n	8004f98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	dc18      	bgt.n	8004f86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f54:	f7ff fdaa 	bl	8004aac <xTaskGetSchedulerState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d109      	bne.n	8004f72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <xTimerGenericCommand+0x98>)
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f107 0110 	add.w	r1, r7, #16
 8004f66:	2300      	movs	r3, #0
 8004f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6a:	f7fe fa79 	bl	8003460 <xQueueGenericSend>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f70:	e012      	b.n	8004f98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <xTimerGenericCommand+0x98>)
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f107 0110 	add.w	r1, r7, #16
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f7fe fa6f 	bl	8003460 <xQueueGenericSend>
 8004f82:	6278      	str	r0, [r7, #36]	; 0x24
 8004f84:	e008      	b.n	8004f98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <xTimerGenericCommand+0x98>)
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f107 0110 	add.w	r1, r7, #16
 8004f8e:	2300      	movs	r3, #0
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	f7fe fb63 	bl	800365c <xQueueGenericSendFromISR>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000c80 	.word	0x20000c80

08004fa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <prvProcessExpiredTimer+0x7c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe f8e3 	bl	800318c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d122      	bne.n	8005014 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	18d1      	adds	r1, r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f000 f8c8 	bl	8005170 <prvInsertTimerInActiveList>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	f7ff ff8b 	bl	8004f0c <xTimerGenericCommand>
 8004ff6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	6978      	ldr	r0, [r7, #20]
 800501a:	4798      	blx	r3
}
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000c78 	.word	0x20000c78

08005028 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f857 	bl	80050e8 <prvGetNextExpireTime>
 800503a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4619      	mov	r1, r3
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f803 	bl	800504c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005046:	f000 f8d5 	bl	80051f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800504a:	e7f1      	b.n	8005030 <prvTimerTask+0x8>

0800504c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005056:	f7ff f93d 	bl	80042d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f866 	bl	8005130 <prvSampleTimeNow>
 8005064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d130      	bne.n	80050ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <prvProcessTimerOrBlockTask+0x3c>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d806      	bhi.n	8005088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800507a:	f7ff f939 	bl	80042f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff91 	bl	8004fa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005086:	e024      	b.n	80050d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <prvProcessTimerOrBlockTask+0x90>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <prvProcessTimerOrBlockTask+0x94>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fe feab 	bl	8003e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050b2:	f7ff f91d 	bl	80042f0 <xTaskResumeAll>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <prvProcessTimerOrBlockTask+0x98>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
}
 80050cc:	e001      	b.n	80050d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050ce:	f7ff f90f 	bl	80042f0 <xTaskResumeAll>
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000c7c 	.word	0x20000c7c
 80050e0:	20000c80 	.word	0x20000c80
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050f0:	4b0e      	ldr	r3, [pc, #56]	; (800512c <prvGetNextExpireTime+0x44>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <prvGetNextExpireTime+0x44>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e001      	b.n	800511e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000c78 	.word	0x20000c78

08005130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005138:	f7ff f978 	bl	800442c <xTaskGetTickCount>
 800513c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <prvSampleTimeNow+0x3c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d205      	bcs.n	8005154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005148:	f000 f908 	bl	800535c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e002      	b.n	800515a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800515a:	4a04      	ldr	r2, [pc, #16]	; (800516c <prvSampleTimeNow+0x3c>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005160:	68fb      	ldr	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000c88 	.word	0x20000c88

08005170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d812      	bhi.n	80051bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d302      	bcc.n	80051aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e01b      	b.n	80051e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <prvInsertTimerInActiveList+0x7c>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fd ffb0 	bl	800311a <vListInsert>
 80051ba:	e012      	b.n	80051e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d206      	bcs.n	80051d2 <prvInsertTimerInActiveList+0x62>
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d302      	bcc.n	80051d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e007      	b.n	80051e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <prvInsertTimerInActiveList+0x80>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fd ff9c 	bl	800311a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051e2:	697b      	ldr	r3, [r7, #20]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000c7c 	.word	0x20000c7c
 80051f0:	20000c78 	.word	0x20000c78

080051f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	; 0x38
 80051f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051fa:	e09d      	b.n	8005338 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da18      	bge.n	8005234 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	3304      	adds	r3, #4
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	61fb      	str	r3, [r7, #28]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522a:	6850      	ldr	r0, [r2, #4]
 800522c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522e:	6892      	ldr	r2, [r2, #8]
 8005230:	4611      	mov	r1, r2
 8005232:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	db7d      	blt.n	8005336 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7fd ff9e 	bl	800318c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005250:	463b      	mov	r3, r7
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff6c 	bl	8005130 <prvSampleTimeNow>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b09      	cmp	r3, #9
 800525e:	d86b      	bhi.n	8005338 <prvProcessReceivedCommands+0x144>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <prvProcessReceivedCommands+0x74>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005291 	.word	0x08005291
 800526c:	08005291 	.word	0x08005291
 8005270:	08005291 	.word	0x08005291
 8005274:	08005339 	.word	0x08005339
 8005278:	080052ed 	.word	0x080052ed
 800527c:	08005325 	.word	0x08005325
 8005280:	08005291 	.word	0x08005291
 8005284:	08005291 	.word	0x08005291
 8005288:	08005339 	.word	0x08005339
 800528c:	080052ed 	.word	0x080052ed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	18d1      	adds	r1, r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529e:	f7ff ff67 	bl	8005170 <prvInsertTimerInActiveList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d047      	beq.n	8005338 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d13f      	bne.n	8005338 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	441a      	add	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ca:	f7ff fe1f 	bl	8004f0c <xTimerGenericCommand>
 80052ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d130      	bne.n	8005338 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	61bb      	str	r3, [r7, #24]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	617b      	str	r3, [r7, #20]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	18d1      	adds	r1, r2, r3
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531e:	f7ff ff27 	bl	8005170 <prvInsertTimerInActiveList>
					break;
 8005322:	e009      	b.n	8005338 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800532e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005330:	f000 fbc6 	bl	8005ac0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005334:	e000      	b.n	8005338 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005336:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <prvProcessReceivedCommands+0x164>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1d39      	adds	r1, r7, #4
 800533e:	2200      	movs	r2, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fa23 	bl	800378c <xQueueReceive>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f af57 	bne.w	80051fc <prvProcessReceivedCommands+0x8>
	}
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20000c80 	.word	0x20000c80

0800535c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005362:	e045      	b.n	80053f0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <prvSwitchTimerLists+0xbc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <prvSwitchTimerLists+0xbc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fd ff05 	bl	800318c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d12e      	bne.n	80053f0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d90e      	bls.n	80053c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <prvSwitchTimerLists+0xbc>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fd fead 	bl	800311a <vListInsert>
 80053c0:	e016      	b.n	80053f0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053c2:	2300      	movs	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	2100      	movs	r1, #0
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff fd9d 	bl	8004f0c <xTimerGenericCommand>
 80053d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <prvSwitchTimerLists+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1b4      	bne.n	8005364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <prvSwitchTimerLists+0xbc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <prvSwitchTimerLists+0xc0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <prvSwitchTimerLists+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <prvSwitchTimerLists+0xc0>)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	6013      	str	r3, [r2, #0]
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000c78 	.word	0x20000c78
 800541c:	20000c7c 	.word	0x20000c7c

08005420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005426:	f000 f965 	bl	80056f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <prvCheckForValidListAndQueue+0x60>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d120      	bne.n	8005474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005432:	4814      	ldr	r0, [pc, #80]	; (8005484 <prvCheckForValidListAndQueue+0x64>)
 8005434:	f7fd fe20 	bl	8003078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005438:	4813      	ldr	r0, [pc, #76]	; (8005488 <prvCheckForValidListAndQueue+0x68>)
 800543a:	f7fd fe1d 	bl	8003078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <prvCheckForValidListAndQueue+0x6c>)
 8005440:	4a10      	ldr	r2, [pc, #64]	; (8005484 <prvCheckForValidListAndQueue+0x64>)
 8005442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <prvCheckForValidListAndQueue+0x70>)
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <prvCheckForValidListAndQueue+0x68>)
 8005448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4b11      	ldr	r3, [pc, #68]	; (8005494 <prvCheckForValidListAndQueue+0x74>)
 8005450:	4a11      	ldr	r2, [pc, #68]	; (8005498 <prvCheckForValidListAndQueue+0x78>)
 8005452:	2110      	movs	r1, #16
 8005454:	200a      	movs	r0, #10
 8005456:	f7fd ff2b 	bl	80032b0 <xQueueGenericCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a08      	ldr	r2, [pc, #32]	; (8005480 <prvCheckForValidListAndQueue+0x60>)
 800545e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <prvCheckForValidListAndQueue+0x60>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <prvCheckForValidListAndQueue+0x60>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	490b      	ldr	r1, [pc, #44]	; (800549c <prvCheckForValidListAndQueue+0x7c>)
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fca0 	bl	8003db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005474:	f000 f96e 	bl	8005754 <vPortExitCritical>
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000c80 	.word	0x20000c80
 8005484:	20000c50 	.word	0x20000c50
 8005488:	20000c64 	.word	0x20000c64
 800548c:	20000c78 	.word	0x20000c78
 8005490:	20000c7c 	.word	0x20000c7c
 8005494:	20000d2c 	.word	0x20000d2c
 8005498:	20000c8c 	.word	0x20000c8c
 800549c:	08006630 	.word	0x08006630

080054a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b04      	subs	r3, #4
 80054b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b04      	subs	r3, #4
 80054be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b04      	subs	r3, #4
 80054ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054d0:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <pxPortInitialiseStack+0x64>)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b14      	subs	r3, #20
 80054da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f06f 0202 	mvn.w	r2, #2
 80054ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3b20      	subs	r3, #32
 80054f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	08005509 	.word	0x08005509

08005508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <prvTaskExitError+0x54>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d00a      	beq.n	8005532 <prvTaskExitError+0x2a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <prvTaskExitError+0x28>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60bb      	str	r3, [r7, #8]
}
 8005544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005546:	bf00      	nop
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0fc      	beq.n	8005548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	2000000c 	.word	0x2000000c

08005560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <pxCurrentTCBConst2>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	f380 8809 	msr	PSP, r0
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	4770      	bx	lr
 800557c:	f3af 8000 	nop.w

08005580 <pxCurrentTCBConst2>:
 8005580:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005588:	4808      	ldr	r0, [pc, #32]	; (80055ac <prvPortStartFirstTask+0x24>)
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f380 8808 	msr	MSP, r0
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f380 8814 	msr	CONTROL, r0
 800559a:	b662      	cpsie	i
 800559c:	b661      	cpsie	f
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	df00      	svc	0
 80055a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055aa:	bf00      	nop
 80055ac:	e000ed08 	.word	0xe000ed08

080055b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055b6:	4b46      	ldr	r3, [pc, #280]	; (80056d0 <xPortStartScheduler+0x120>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a46      	ldr	r2, [pc, #280]	; (80056d4 <xPortStartScheduler+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10a      	bne.n	80055d6 <xPortStartScheduler+0x26>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055d6:	4b3e      	ldr	r3, [pc, #248]	; (80056d0 <xPortStartScheduler+0x120>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a3f      	ldr	r2, [pc, #252]	; (80056d8 <xPortStartScheduler+0x128>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10a      	bne.n	80055f6 <xPortStartScheduler+0x46>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055f6:	4b39      	ldr	r3, [pc, #228]	; (80056dc <xPortStartScheduler+0x12c>)
 80055f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <xPortStartScheduler+0x130>)
 800561c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <xPortStartScheduler+0x134>)
 8005620:	2207      	movs	r2, #7
 8005622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005624:	e009      	b.n	800563a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <xPortStartScheduler+0x134>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3b01      	subs	r3, #1
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <xPortStartScheduler+0x134>)
 800562e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d0ef      	beq.n	8005626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005646:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <xPortStartScheduler+0x134>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1c3 0307 	rsb	r3, r3, #7
 800564e:	2b04      	cmp	r3, #4
 8005650:	d00a      	beq.n	8005668 <xPortStartScheduler+0xb8>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60bb      	str	r3, [r7, #8]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <xPortStartScheduler+0x134>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <xPortStartScheduler+0x134>)
 8005670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <xPortStartScheduler+0x134>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800567a:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <xPortStartScheduler+0x134>)
 800567c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <xPortStartScheduler+0x138>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <xPortStartScheduler+0x138>)
 800568c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <xPortStartScheduler+0x138>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <xPortStartScheduler+0x138>)
 8005698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800569c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800569e:	f000 f8dd 	bl	800585c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <xPortStartScheduler+0x13c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056a8:	f000 f8fc 	bl	80058a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <xPortStartScheduler+0x140>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0f      	ldr	r2, [pc, #60]	; (80056f0 <xPortStartScheduler+0x140>)
 80056b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056b8:	f7ff ff66 	bl	8005588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056bc:	f7fe ff84 	bl	80045c8 <vTaskSwitchContext>
	prvTaskExitError();
 80056c0:	f7ff ff22 	bl	8005508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	e000ed00 	.word	0xe000ed00
 80056d4:	410fc271 	.word	0x410fc271
 80056d8:	410fc270 	.word	0x410fc270
 80056dc:	e000e400 	.word	0xe000e400
 80056e0:	20000d7c 	.word	0x20000d7c
 80056e4:	20000d80 	.word	0x20000d80
 80056e8:	e000ed20 	.word	0xe000ed20
 80056ec:	2000000c 	.word	0x2000000c
 80056f0:	e000ef34 	.word	0xe000ef34

080056f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
}
 800570c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <vPortEnterCritical+0x58>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <vPortEnterCritical+0x58>)
 8005716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <vPortEnterCritical+0x58>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d10f      	bne.n	8005740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <vPortEnterCritical+0x5c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <vPortEnterCritical+0x4c>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	603b      	str	r3, [r7, #0]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vPortEnterCritical+0x4a>
	}
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	2000000c 	.word	0x2000000c
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <vPortExitCritical+0x50>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <vPortExitCritical+0x24>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	607b      	str	r3, [r7, #4]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <vPortExitCritical+0x50>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3b01      	subs	r3, #1
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <vPortExitCritical+0x50>)
 8005780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005782:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <vPortExitCritical+0x50>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <vPortExitCritical+0x42>
 800578a:	2300      	movs	r3, #0
 800578c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f383 8811 	msr	BASEPRI, r3
}
 8005794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	2000000c 	.word	0x2000000c
	...

080057b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057b0:	f3ef 8009 	mrs	r0, PSP
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <pxCurrentTCBConst>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	f01e 0f10 	tst.w	lr, #16
 80057c0:	bf08      	it	eq
 80057c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	6010      	str	r0, [r2, #0]
 80057cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057d4:	f380 8811 	msr	BASEPRI, r0
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f7fe fef2 	bl	80045c8 <vTaskSwitchContext>
 80057e4:	f04f 0000 	mov.w	r0, #0
 80057e8:	f380 8811 	msr	BASEPRI, r0
 80057ec:	bc09      	pop	{r0, r3}
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	6808      	ldr	r0, [r1, #0]
 80057f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f6:	f01e 0f10 	tst.w	lr, #16
 80057fa:	bf08      	it	eq
 80057fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005800:	f380 8809 	msr	PSP, r0
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	f3af 8000 	nop.w

08005810 <pxCurrentTCBConst>:
 8005810:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop

08005818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	607b      	str	r3, [r7, #4]
}
 8005830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005832:	f7fe fe0b 	bl	800444c <xTaskIncrementTick>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <SysTick_Handler+0x40>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	2300      	movs	r3, #0
 8005846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f383 8811 	msr	BASEPRI, r3
}
 800584e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <vPortSetupTimerInterrupt+0x34>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <vPortSetupTimerInterrupt+0x38>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <vPortSetupTimerInterrupt+0x3c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0a      	ldr	r2, [pc, #40]	; (800589c <vPortSetupTimerInterrupt+0x40>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <vPortSetupTimerInterrupt+0x44>)
 800587a:	3b01      	subs	r3, #1
 800587c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <vPortSetupTimerInterrupt+0x34>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	e000e010 	.word	0xe000e010
 8005894:	e000e018 	.word	0xe000e018
 8005898:	20000000 	.word	0x20000000
 800589c:	10624dd3 	.word	0x10624dd3
 80058a0:	e000e014 	.word	0xe000e014

080058a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058b4 <vPortEnableVFP+0x10>
 80058a8:	6801      	ldr	r1, [r0, #0]
 80058aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ae:	6001      	str	r1, [r0, #0]
 80058b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058b2:	bf00      	nop
 80058b4:	e000ed88 	.word	0xe000ed88

080058b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058be:	f3ef 8305 	mrs	r3, IPSR
 80058c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	d914      	bls.n	80058f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <vPortValidateInterruptPriority+0x70>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058d4:	4b15      	ldr	r3, [pc, #84]	; (800592c <vPortValidateInterruptPriority+0x74>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	7afa      	ldrb	r2, [r7, #11]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d20a      	bcs.n	80058f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <vPortValidateInterruptPriority+0x78>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <vPortValidateInterruptPriority+0x7c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d90a      	bls.n	800591a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	603b      	str	r3, [r7, #0]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <vPortValidateInterruptPriority+0x60>
	}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	e000e3f0 	.word	0xe000e3f0
 800592c:	20000d7c 	.word	0x20000d7c
 8005930:	e000ed0c 	.word	0xe000ed0c
 8005934:	20000d80 	.word	0x20000d80

08005938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005944:	f7fe fcc6 	bl	80042d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005948:	4b58      	ldr	r3, [pc, #352]	; (8005aac <pvPortMalloc+0x174>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005950:	f000 f910 	bl	8005b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005954:	4b56      	ldr	r3, [pc, #344]	; (8005ab0 <pvPortMalloc+0x178>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 808e 	bne.w	8005a7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01d      	beq.n	80059a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005968:	2208      	movs	r2, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	2b00      	cmp	r3, #0
 8005978:	d014      	beq.n	80059a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	3308      	adds	r3, #8
 8005982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <pvPortMalloc+0x6c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	617b      	str	r3, [r7, #20]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d069      	beq.n	8005a7e <pvPortMalloc+0x146>
 80059aa:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <pvPortMalloc+0x17c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d864      	bhi.n	8005a7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059b4:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <pvPortMalloc+0x180>)
 80059b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059b8:	4b3f      	ldr	r3, [pc, #252]	; (8005ab8 <pvPortMalloc+0x180>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059be:	e004      	b.n	80059ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d903      	bls.n	80059dc <pvPortMalloc+0xa4>
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f1      	bne.n	80059c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059dc:	4b33      	ldr	r3, [pc, #204]	; (8005aac <pvPortMalloc+0x174>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d04b      	beq.n	8005a7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2208      	movs	r2, #8
 80059ec:	4413      	add	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	2308      	movs	r3, #8
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d91f      	bls.n	8005a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <pvPortMalloc+0xf8>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	613b      	str	r3, [r7, #16]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a42:	69b8      	ldr	r0, [r7, #24]
 8005a44:	f000 f8f8 	bl	8005c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <pvPortMalloc+0x17c>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <pvPortMalloc+0x17c>)
 8005a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <pvPortMalloc+0x17c>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b18      	ldr	r3, [pc, #96]	; (8005abc <pvPortMalloc+0x184>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d203      	bcs.n	8005a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a62:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <pvPortMalloc+0x17c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <pvPortMalloc+0x184>)
 8005a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <pvPortMalloc+0x178>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a7e:	f7fe fc37 	bl	80042f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <pvPortMalloc+0x16a>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <pvPortMalloc+0x168>
	return pvReturn;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3728      	adds	r7, #40	; 0x28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000198c 	.word	0x2000198c
 8005ab0:	20001998 	.word	0x20001998
 8005ab4:	20001990 	.word	0x20001990
 8005ab8:	20001984 	.word	0x20001984
 8005abc:	20001994 	.word	0x20001994

08005ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d048      	beq.n	8005b64 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <vPortFree+0xac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <vPortFree+0x44>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <vPortFree+0x62>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60bb      	str	r3, [r7, #8]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <vPortFree+0xac>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d115      	bne.n	8005b64 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <vPortFree+0xac>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	401a      	ands	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b48:	f7fe fbc4 	bl	80042d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <vPortFree+0xb0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	4a06      	ldr	r2, [pc, #24]	; (8005b70 <vPortFree+0xb0>)
 8005b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f000 f86c 	bl	8005c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b60:	f7fe fbc6 	bl	80042f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20001998 	.word	0x20001998
 8005b70:	20001990 	.word	0x20001990

08005b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <prvHeapInit+0xac>)
 8005b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3307      	adds	r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <prvHeapInit+0xac>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <prvHeapInit+0xb0>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <prvHeapInit+0xb0>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <prvHeapInit+0xb4>)
 8005bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <prvHeapInit+0xb4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <prvHeapInit+0xb4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvHeapInit+0xb4>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <prvHeapInit+0xb8>)
 8005c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <prvHeapInit+0xbc>)
 8005c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <prvHeapInit+0xc0>)
 8005c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000d84 	.word	0x20000d84
 8005c24:	20001984 	.word	0x20001984
 8005c28:	2000198c 	.word	0x2000198c
 8005c2c:	20001994 	.word	0x20001994
 8005c30:	20001990 	.word	0x20001990
 8005c34:	20001998 	.word	0x20001998

08005c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <prvInsertBlockIntoFreeList+0xac>)
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <prvInsertBlockIntoFreeList+0x14>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d8f7      	bhi.n	8005c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d108      	bne.n	8005c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d118      	bne.n	8005cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d00d      	beq.n	8005cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e008      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e003      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d002      	beq.n	8005cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20001984 	.word	0x20001984
 8005ce8:	2000198c 	.word	0x2000198c

08005cec <__errno>:
 8005cec:	4b01      	ldr	r3, [pc, #4]	; (8005cf4 <__errno+0x8>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000010 	.word	0x20000010

08005cf8 <__libc_init_array>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4d0d      	ldr	r5, [pc, #52]	; (8005d30 <__libc_init_array+0x38>)
 8005cfc:	4c0d      	ldr	r4, [pc, #52]	; (8005d34 <__libc_init_array+0x3c>)
 8005cfe:	1b64      	subs	r4, r4, r5
 8005d00:	10a4      	asrs	r4, r4, #2
 8005d02:	2600      	movs	r6, #0
 8005d04:	42a6      	cmp	r6, r4
 8005d06:	d109      	bne.n	8005d1c <__libc_init_array+0x24>
 8005d08:	4d0b      	ldr	r5, [pc, #44]	; (8005d38 <__libc_init_array+0x40>)
 8005d0a:	4c0c      	ldr	r4, [pc, #48]	; (8005d3c <__libc_init_array+0x44>)
 8005d0c:	f000 fc4e 	bl	80065ac <_init>
 8005d10:	1b64      	subs	r4, r4, r5
 8005d12:	10a4      	asrs	r4, r4, #2
 8005d14:	2600      	movs	r6, #0
 8005d16:	42a6      	cmp	r6, r4
 8005d18:	d105      	bne.n	8005d26 <__libc_init_array+0x2e>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d20:	4798      	blx	r3
 8005d22:	3601      	adds	r6, #1
 8005d24:	e7ee      	b.n	8005d04 <__libc_init_array+0xc>
 8005d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2a:	4798      	blx	r3
 8005d2c:	3601      	adds	r6, #1
 8005d2e:	e7f2      	b.n	8005d16 <__libc_init_array+0x1e>
 8005d30:	080066c8 	.word	0x080066c8
 8005d34:	080066c8 	.word	0x080066c8
 8005d38:	080066c8 	.word	0x080066c8
 8005d3c:	080066cc 	.word	0x080066cc

08005d40 <memcpy>:
 8005d40:	440a      	add	r2, r1
 8005d42:	4291      	cmp	r1, r2
 8005d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d48:	d100      	bne.n	8005d4c <memcpy+0xc>
 8005d4a:	4770      	bx	lr
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d56:	4291      	cmp	r1, r2
 8005d58:	d1f9      	bne.n	8005d4e <memcpy+0xe>
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <siprintf>:
 8005d6c:	b40e      	push	{r1, r2, r3}
 8005d6e:	b500      	push	{lr}
 8005d70:	b09c      	sub	sp, #112	; 0x70
 8005d72:	ab1d      	add	r3, sp, #116	; 0x74
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <siprintf+0x38>)
 8005d7e:	9107      	str	r1, [sp, #28]
 8005d80:	9104      	str	r1, [sp, #16]
 8005d82:	4909      	ldr	r1, [pc, #36]	; (8005da8 <siprintf+0x3c>)
 8005d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d88:	9105      	str	r1, [sp, #20]
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	a902      	add	r1, sp, #8
 8005d90:	f000 f868 	bl	8005e64 <_svfiprintf_r>
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	b01c      	add	sp, #112	; 0x70
 8005d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da0:	b003      	add	sp, #12
 8005da2:	4770      	bx	lr
 8005da4:	20000010 	.word	0x20000010
 8005da8:	ffff0208 	.word	0xffff0208

08005dac <__ssputs_r>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	688e      	ldr	r6, [r1, #8]
 8005db2:	429e      	cmp	r6, r3
 8005db4:	4682      	mov	sl, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	4690      	mov	r8, r2
 8005dba:	461f      	mov	r7, r3
 8005dbc:	d838      	bhi.n	8005e30 <__ssputs_r+0x84>
 8005dbe:	898a      	ldrh	r2, [r1, #12]
 8005dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dc4:	d032      	beq.n	8005e2c <__ssputs_r+0x80>
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	6909      	ldr	r1, [r1, #16]
 8005dca:	eba5 0901 	sub.w	r9, r5, r1
 8005dce:	6965      	ldr	r5, [r4, #20]
 8005dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dd8:	3301      	adds	r3, #1
 8005dda:	444b      	add	r3, r9
 8005ddc:	106d      	asrs	r5, r5, #1
 8005dde:	429d      	cmp	r5, r3
 8005de0:	bf38      	it	cc
 8005de2:	461d      	movcc	r5, r3
 8005de4:	0553      	lsls	r3, r2, #21
 8005de6:	d531      	bpl.n	8005e4c <__ssputs_r+0xa0>
 8005de8:	4629      	mov	r1, r5
 8005dea:	f000 fb39 	bl	8006460 <_malloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	b950      	cbnz	r0, 8005e08 <__ssputs_r+0x5c>
 8005df2:	230c      	movs	r3, #12
 8005df4:	f8ca 3000 	str.w	r3, [sl]
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	6921      	ldr	r1, [r4, #16]
 8005e0a:	464a      	mov	r2, r9
 8005e0c:	f7ff ff98 	bl	8005d40 <memcpy>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	6126      	str	r6, [r4, #16]
 8005e1e:	6165      	str	r5, [r4, #20]
 8005e20:	444e      	add	r6, r9
 8005e22:	eba5 0509 	sub.w	r5, r5, r9
 8005e26:	6026      	str	r6, [r4, #0]
 8005e28:	60a5      	str	r5, [r4, #8]
 8005e2a:	463e      	mov	r6, r7
 8005e2c:	42be      	cmp	r6, r7
 8005e2e:	d900      	bls.n	8005e32 <__ssputs_r+0x86>
 8005e30:	463e      	mov	r6, r7
 8005e32:	4632      	mov	r2, r6
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	4641      	mov	r1, r8
 8005e38:	f000 faa8 	bl	800638c <memmove>
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	1b9b      	subs	r3, r3, r6
 8005e42:	4432      	add	r2, r6
 8005e44:	60a3      	str	r3, [r4, #8]
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7db      	b.n	8005e04 <__ssputs_r+0x58>
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	f000 fb61 	bl	8006514 <_realloc_r>
 8005e52:	4606      	mov	r6, r0
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d1e1      	bne.n	8005e1c <__ssputs_r+0x70>
 8005e58:	6921      	ldr	r1, [r4, #16]
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f000 fab0 	bl	80063c0 <_free_r>
 8005e60:	e7c7      	b.n	8005df2 <__ssputs_r+0x46>
	...

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4698      	mov	r8, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	b09d      	sub	sp, #116	; 0x74
 8005e70:	4607      	mov	r7, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	d50e      	bpl.n	8005e96 <_svfiprintf_r+0x32>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b963      	cbnz	r3, 8005e96 <_svfiprintf_r+0x32>
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	f000 faef 	bl	8006460 <_malloc_r>
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6128      	str	r0, [r5, #16]
 8005e86:	b920      	cbnz	r0, 8005e92 <_svfiprintf_r+0x2e>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	e0d1      	b.n	8006036 <_svfiprintf_r+0x1d2>
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	616b      	str	r3, [r5, #20]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea4:	2330      	movs	r3, #48	; 0x30
 8005ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006050 <_svfiprintf_r+0x1ec>
 8005eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eae:	f04f 0901 	mov.w	r9, #1
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eba:	b10a      	cbz	r2, 8005ec0 <_svfiprintf_r+0x5c>
 8005ebc:	2a25      	cmp	r2, #37	; 0x25
 8005ebe:	d1f9      	bne.n	8005eb4 <_svfiprintf_r+0x50>
 8005ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec4:	d00b      	beq.n	8005ede <_svfiprintf_r+0x7a>
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff6d 	bl	8005dac <__ssputs_r>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f000 80aa 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	445a      	add	r2, fp
 8005edc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ede:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a2 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef2:	f10a 0a01 	add.w	sl, sl, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efe:	931a      	str	r3, [sp, #104]	; 0x68
 8005f00:	4654      	mov	r4, sl
 8005f02:	2205      	movs	r2, #5
 8005f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f08:	4851      	ldr	r0, [pc, #324]	; (8006050 <_svfiprintf_r+0x1ec>)
 8005f0a:	f7fa f961 	bl	80001d0 <memchr>
 8005f0e:	9a04      	ldr	r2, [sp, #16]
 8005f10:	b9d8      	cbnz	r0, 8005f4a <_svfiprintf_r+0xe6>
 8005f12:	06d0      	lsls	r0, r2, #27
 8005f14:	bf44      	itt	mi
 8005f16:	2320      	movmi	r3, #32
 8005f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f1c:	0711      	lsls	r1, r2, #28
 8005f1e:	bf44      	itt	mi
 8005f20:	232b      	movmi	r3, #43	; 0x2b
 8005f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2c:	d015      	beq.n	8005f5a <_svfiprintf_r+0xf6>
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	4654      	mov	r4, sl
 8005f32:	2000      	movs	r0, #0
 8005f34:	f04f 0c0a 	mov.w	ip, #10
 8005f38:	4621      	mov	r1, r4
 8005f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3e:	3b30      	subs	r3, #48	; 0x30
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d94e      	bls.n	8005fe2 <_svfiprintf_r+0x17e>
 8005f44:	b1b0      	cbz	r0, 8005f74 <_svfiprintf_r+0x110>
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	e014      	b.n	8005f74 <_svfiprintf_r+0x110>
 8005f4a:	eba0 0308 	sub.w	r3, r0, r8
 8005f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	46a2      	mov	sl, r4
 8005f58:	e7d2      	b.n	8005f00 <_svfiprintf_r+0x9c>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9103      	str	r1, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfbb      	ittet	lt
 8005f66:	425b      	neglt	r3, r3
 8005f68:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6c:	9307      	strge	r3, [sp, #28]
 8005f6e:	9307      	strlt	r3, [sp, #28]
 8005f70:	bfb8      	it	lt
 8005f72:	9204      	strlt	r2, [sp, #16]
 8005f74:	7823      	ldrb	r3, [r4, #0]
 8005f76:	2b2e      	cmp	r3, #46	; 0x2e
 8005f78:	d10c      	bne.n	8005f94 <_svfiprintf_r+0x130>
 8005f7a:	7863      	ldrb	r3, [r4, #1]
 8005f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7e:	d135      	bne.n	8005fec <_svfiprintf_r+0x188>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9203      	str	r2, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfb8      	it	lt
 8005f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f90:	3402      	adds	r4, #2
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006060 <_svfiprintf_r+0x1fc>
 8005f98:	7821      	ldrb	r1, [r4, #0]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f7fa f917 	bl	80001d0 <memchr>
 8005fa2:	b140      	cbz	r0, 8005fb6 <_svfiprintf_r+0x152>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	eba0 000a 	sub.w	r0, r0, sl
 8005faa:	fa03 f000 	lsl.w	r0, r3, r0
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	4303      	orrs	r3, r0
 8005fb2:	3401      	adds	r4, #1
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fba:	4826      	ldr	r0, [pc, #152]	; (8006054 <_svfiprintf_r+0x1f0>)
 8005fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fc0:	2206      	movs	r2, #6
 8005fc2:	f7fa f905 	bl	80001d0 <memchr>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d038      	beq.n	800603c <_svfiprintf_r+0x1d8>
 8005fca:	4b23      	ldr	r3, [pc, #140]	; (8006058 <_svfiprintf_r+0x1f4>)
 8005fcc:	bb1b      	cbnz	r3, 8006016 <_svfiprintf_r+0x1b2>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	3307      	adds	r3, #7
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fdc:	4433      	add	r3, r6
 8005fde:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe0:	e767      	b.n	8005eb2 <_svfiprintf_r+0x4e>
 8005fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e7a5      	b.n	8005f38 <_svfiprintf_r+0xd4>
 8005fec:	2300      	movs	r3, #0
 8005fee:	3401      	adds	r4, #1
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f04f 0c0a 	mov.w	ip, #10
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffe:	3a30      	subs	r2, #48	; 0x30
 8006000:	2a09      	cmp	r2, #9
 8006002:	d903      	bls.n	800600c <_svfiprintf_r+0x1a8>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0c5      	beq.n	8005f94 <_svfiprintf_r+0x130>
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	e7c3      	b.n	8005f94 <_svfiprintf_r+0x130>
 800600c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006010:	4604      	mov	r4, r0
 8006012:	2301      	movs	r3, #1
 8006014:	e7f0      	b.n	8005ff8 <_svfiprintf_r+0x194>
 8006016:	ab03      	add	r3, sp, #12
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	462a      	mov	r2, r5
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <_svfiprintf_r+0x1f8>)
 800601e:	a904      	add	r1, sp, #16
 8006020:	4638      	mov	r0, r7
 8006022:	f3af 8000 	nop.w
 8006026:	1c42      	adds	r2, r0, #1
 8006028:	4606      	mov	r6, r0
 800602a:	d1d6      	bne.n	8005fda <_svfiprintf_r+0x176>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	065b      	lsls	r3, r3, #25
 8006030:	f53f af2c 	bmi.w	8005e8c <_svfiprintf_r+0x28>
 8006034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006036:	b01d      	add	sp, #116	; 0x74
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	462a      	mov	r2, r5
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <_svfiprintf_r+0x1f8>)
 8006044:	a904      	add	r1, sp, #16
 8006046:	4638      	mov	r0, r7
 8006048:	f000 f87a 	bl	8006140 <_printf_i>
 800604c:	e7eb      	b.n	8006026 <_svfiprintf_r+0x1c2>
 800604e:	bf00      	nop
 8006050:	08006694 	.word	0x08006694
 8006054:	0800669e 	.word	0x0800669e
 8006058:	00000000 	.word	0x00000000
 800605c:	08005dad 	.word	0x08005dad
 8006060:	0800669a 	.word	0x0800669a

08006064 <_printf_common>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4616      	mov	r6, r2
 800606a:	4699      	mov	r9, r3
 800606c:	688a      	ldr	r2, [r1, #8]
 800606e:	690b      	ldr	r3, [r1, #16]
 8006070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006074:	4293      	cmp	r3, r2
 8006076:	bfb8      	it	lt
 8006078:	4613      	movlt	r3, r2
 800607a:	6033      	str	r3, [r6, #0]
 800607c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006080:	4607      	mov	r7, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b10a      	cbz	r2, 800608a <_printf_common+0x26>
 8006086:	3301      	adds	r3, #1
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	0699      	lsls	r1, r3, #26
 800608e:	bf42      	ittt	mi
 8006090:	6833      	ldrmi	r3, [r6, #0]
 8006092:	3302      	addmi	r3, #2
 8006094:	6033      	strmi	r3, [r6, #0]
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	f015 0506 	ands.w	r5, r5, #6
 800609c:	d106      	bne.n	80060ac <_printf_common+0x48>
 800609e:	f104 0a19 	add.w	sl, r4, #25
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	6832      	ldr	r2, [r6, #0]
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dc26      	bgt.n	80060fa <_printf_common+0x96>
 80060ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060b0:	1e13      	subs	r3, r2, #0
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	bf18      	it	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	0692      	lsls	r2, r2, #26
 80060ba:	d42b      	bmi.n	8006114 <_printf_common+0xb0>
 80060bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c0:	4649      	mov	r1, r9
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c0      	blx	r8
 80060c6:	3001      	adds	r0, #1
 80060c8:	d01e      	beq.n	8006108 <_printf_common+0xa4>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	68e5      	ldr	r5, [r4, #12]
 80060ce:	6832      	ldr	r2, [r6, #0]
 80060d0:	f003 0306 	and.w	r3, r3, #6
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	bf08      	it	eq
 80060d8:	1aad      	subeq	r5, r5, r2
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	bf0c      	ite	eq
 80060e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e4:	2500      	movne	r5, #0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	bfc4      	itt	gt
 80060ea:	1a9b      	subgt	r3, r3, r2
 80060ec:	18ed      	addgt	r5, r5, r3
 80060ee:	2600      	movs	r6, #0
 80060f0:	341a      	adds	r4, #26
 80060f2:	42b5      	cmp	r5, r6
 80060f4:	d11a      	bne.n	800612c <_printf_common+0xc8>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e008      	b.n	800610c <_printf_common+0xa8>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4652      	mov	r2, sl
 80060fe:	4649      	mov	r1, r9
 8006100:	4638      	mov	r0, r7
 8006102:	47c0      	blx	r8
 8006104:	3001      	adds	r0, #1
 8006106:	d103      	bne.n	8006110 <_printf_common+0xac>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	3501      	adds	r5, #1
 8006112:	e7c6      	b.n	80060a2 <_printf_common+0x3e>
 8006114:	18e1      	adds	r1, r4, r3
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	2030      	movs	r0, #48	; 0x30
 800611a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800611e:	4422      	add	r2, r4
 8006120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006128:	3302      	adds	r3, #2
 800612a:	e7c7      	b.n	80060bc <_printf_common+0x58>
 800612c:	2301      	movs	r3, #1
 800612e:	4622      	mov	r2, r4
 8006130:	4649      	mov	r1, r9
 8006132:	4638      	mov	r0, r7
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d0e6      	beq.n	8006108 <_printf_common+0xa4>
 800613a:	3601      	adds	r6, #1
 800613c:	e7d9      	b.n	80060f2 <_printf_common+0x8e>
	...

08006140 <_printf_i>:
 8006140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	4691      	mov	r9, r2
 8006148:	7e27      	ldrb	r7, [r4, #24]
 800614a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800614c:	2f78      	cmp	r7, #120	; 0x78
 800614e:	4680      	mov	r8, r0
 8006150:	469a      	mov	sl, r3
 8006152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006156:	d807      	bhi.n	8006168 <_printf_i+0x28>
 8006158:	2f62      	cmp	r7, #98	; 0x62
 800615a:	d80a      	bhi.n	8006172 <_printf_i+0x32>
 800615c:	2f00      	cmp	r7, #0
 800615e:	f000 80d8 	beq.w	8006312 <_printf_i+0x1d2>
 8006162:	2f58      	cmp	r7, #88	; 0x58
 8006164:	f000 80a3 	beq.w	80062ae <_printf_i+0x16e>
 8006168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800616c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006170:	e03a      	b.n	80061e8 <_printf_i+0xa8>
 8006172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006176:	2b15      	cmp	r3, #21
 8006178:	d8f6      	bhi.n	8006168 <_printf_i+0x28>
 800617a:	a001      	add	r0, pc, #4	; (adr r0, 8006180 <_printf_i+0x40>)
 800617c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061ed 	.word	0x080061ed
 8006188:	08006169 	.word	0x08006169
 800618c:	08006169 	.word	0x08006169
 8006190:	08006169 	.word	0x08006169
 8006194:	08006169 	.word	0x08006169
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006169 	.word	0x08006169
 80061a0:	08006169 	.word	0x08006169
 80061a4:	08006169 	.word	0x08006169
 80061a8:	08006169 	.word	0x08006169
 80061ac:	080062f9 	.word	0x080062f9
 80061b0:	0800621d 	.word	0x0800621d
 80061b4:	080062db 	.word	0x080062db
 80061b8:	08006169 	.word	0x08006169
 80061bc:	08006169 	.word	0x08006169
 80061c0:	0800631b 	.word	0x0800631b
 80061c4:	08006169 	.word	0x08006169
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006169 	.word	0x08006169
 80061d0:	08006169 	.word	0x08006169
 80061d4:	080062e3 	.word	0x080062e3
 80061d8:	680b      	ldr	r3, [r1, #0]
 80061da:	1d1a      	adds	r2, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	600a      	str	r2, [r1, #0]
 80061e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0a3      	b.n	8006334 <_printf_i+0x1f4>
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	6808      	ldr	r0, [r1, #0]
 80061f0:	062e      	lsls	r6, r5, #24
 80061f2:	f100 0304 	add.w	r3, r0, #4
 80061f6:	d50a      	bpl.n	800620e <_printf_i+0xce>
 80061f8:	6805      	ldr	r5, [r0, #0]
 80061fa:	600b      	str	r3, [r1, #0]
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	da03      	bge.n	8006208 <_printf_i+0xc8>
 8006200:	232d      	movs	r3, #45	; 0x2d
 8006202:	426d      	negs	r5, r5
 8006204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006208:	485e      	ldr	r0, [pc, #376]	; (8006384 <_printf_i+0x244>)
 800620a:	230a      	movs	r3, #10
 800620c:	e019      	b.n	8006242 <_printf_i+0x102>
 800620e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006212:	6805      	ldr	r5, [r0, #0]
 8006214:	600b      	str	r3, [r1, #0]
 8006216:	bf18      	it	ne
 8006218:	b22d      	sxthne	r5, r5
 800621a:	e7ef      	b.n	80061fc <_printf_i+0xbc>
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	1d18      	adds	r0, r3, #4
 8006222:	6008      	str	r0, [r1, #0]
 8006224:	0628      	lsls	r0, r5, #24
 8006226:	d501      	bpl.n	800622c <_printf_i+0xec>
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	e002      	b.n	8006232 <_printf_i+0xf2>
 800622c:	0669      	lsls	r1, r5, #25
 800622e:	d5fb      	bpl.n	8006228 <_printf_i+0xe8>
 8006230:	881d      	ldrh	r5, [r3, #0]
 8006232:	4854      	ldr	r0, [pc, #336]	; (8006384 <_printf_i+0x244>)
 8006234:	2f6f      	cmp	r7, #111	; 0x6f
 8006236:	bf0c      	ite	eq
 8006238:	2308      	moveq	r3, #8
 800623a:	230a      	movne	r3, #10
 800623c:	2100      	movs	r1, #0
 800623e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006242:	6866      	ldr	r6, [r4, #4]
 8006244:	60a6      	str	r6, [r4, #8]
 8006246:	2e00      	cmp	r6, #0
 8006248:	bfa2      	ittt	ge
 800624a:	6821      	ldrge	r1, [r4, #0]
 800624c:	f021 0104 	bicge.w	r1, r1, #4
 8006250:	6021      	strge	r1, [r4, #0]
 8006252:	b90d      	cbnz	r5, 8006258 <_printf_i+0x118>
 8006254:	2e00      	cmp	r6, #0
 8006256:	d04d      	beq.n	80062f4 <_printf_i+0x1b4>
 8006258:	4616      	mov	r6, r2
 800625a:	fbb5 f1f3 	udiv	r1, r5, r3
 800625e:	fb03 5711 	mls	r7, r3, r1, r5
 8006262:	5dc7      	ldrb	r7, [r0, r7]
 8006264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006268:	462f      	mov	r7, r5
 800626a:	42bb      	cmp	r3, r7
 800626c:	460d      	mov	r5, r1
 800626e:	d9f4      	bls.n	800625a <_printf_i+0x11a>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d10b      	bne.n	800628c <_printf_i+0x14c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	07df      	lsls	r7, r3, #31
 8006278:	d508      	bpl.n	800628c <_printf_i+0x14c>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	6861      	ldr	r1, [r4, #4]
 800627e:	4299      	cmp	r1, r3
 8006280:	bfde      	ittt	le
 8006282:	2330      	movle	r3, #48	; 0x30
 8006284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800628c:	1b92      	subs	r2, r2, r6
 800628e:	6122      	str	r2, [r4, #16]
 8006290:	f8cd a000 	str.w	sl, [sp]
 8006294:	464b      	mov	r3, r9
 8006296:	aa03      	add	r2, sp, #12
 8006298:	4621      	mov	r1, r4
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fee2 	bl	8006064 <_printf_common>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d14c      	bne.n	800633e <_printf_i+0x1fe>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	b004      	add	sp, #16
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	4835      	ldr	r0, [pc, #212]	; (8006384 <_printf_i+0x244>)
 80062b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	680e      	ldr	r6, [r1, #0]
 80062b8:	061f      	lsls	r7, r3, #24
 80062ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80062be:	600e      	str	r6, [r1, #0]
 80062c0:	d514      	bpl.n	80062ec <_printf_i+0x1ac>
 80062c2:	07d9      	lsls	r1, r3, #31
 80062c4:	bf44      	itt	mi
 80062c6:	f043 0320 	orrmi.w	r3, r3, #32
 80062ca:	6023      	strmi	r3, [r4, #0]
 80062cc:	b91d      	cbnz	r5, 80062d6 <_printf_i+0x196>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f023 0320 	bic.w	r3, r3, #32
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	2310      	movs	r3, #16
 80062d8:	e7b0      	b.n	800623c <_printf_i+0xfc>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	2378      	movs	r3, #120	; 0x78
 80062e4:	4828      	ldr	r0, [pc, #160]	; (8006388 <_printf_i+0x248>)
 80062e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ea:	e7e3      	b.n	80062b4 <_printf_i+0x174>
 80062ec:	065e      	lsls	r6, r3, #25
 80062ee:	bf48      	it	mi
 80062f0:	b2ad      	uxthmi	r5, r5
 80062f2:	e7e6      	b.n	80062c2 <_printf_i+0x182>
 80062f4:	4616      	mov	r6, r2
 80062f6:	e7bb      	b.n	8006270 <_printf_i+0x130>
 80062f8:	680b      	ldr	r3, [r1, #0]
 80062fa:	6826      	ldr	r6, [r4, #0]
 80062fc:	6960      	ldr	r0, [r4, #20]
 80062fe:	1d1d      	adds	r5, r3, #4
 8006300:	600d      	str	r5, [r1, #0]
 8006302:	0635      	lsls	r5, r6, #24
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	d501      	bpl.n	800630c <_printf_i+0x1cc>
 8006308:	6018      	str	r0, [r3, #0]
 800630a:	e002      	b.n	8006312 <_printf_i+0x1d2>
 800630c:	0671      	lsls	r1, r6, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0x1c8>
 8006310:	8018      	strh	r0, [r3, #0]
 8006312:	2300      	movs	r3, #0
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	4616      	mov	r6, r2
 8006318:	e7ba      	b.n	8006290 <_printf_i+0x150>
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	1d1a      	adds	r2, r3, #4
 800631e:	600a      	str	r2, [r1, #0]
 8006320:	681e      	ldr	r6, [r3, #0]
 8006322:	6862      	ldr	r2, [r4, #4]
 8006324:	2100      	movs	r1, #0
 8006326:	4630      	mov	r0, r6
 8006328:	f7f9 ff52 	bl	80001d0 <memchr>
 800632c:	b108      	cbz	r0, 8006332 <_printf_i+0x1f2>
 800632e:	1b80      	subs	r0, r0, r6
 8006330:	6060      	str	r0, [r4, #4]
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	2300      	movs	r3, #0
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633c:	e7a8      	b.n	8006290 <_printf_i+0x150>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	4632      	mov	r2, r6
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	47d0      	blx	sl
 8006348:	3001      	adds	r0, #1
 800634a:	d0ab      	beq.n	80062a4 <_printf_i+0x164>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	079b      	lsls	r3, r3, #30
 8006350:	d413      	bmi.n	800637a <_printf_i+0x23a>
 8006352:	68e0      	ldr	r0, [r4, #12]
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	4298      	cmp	r0, r3
 8006358:	bfb8      	it	lt
 800635a:	4618      	movlt	r0, r3
 800635c:	e7a4      	b.n	80062a8 <_printf_i+0x168>
 800635e:	2301      	movs	r3, #1
 8006360:	4632      	mov	r2, r6
 8006362:	4649      	mov	r1, r9
 8006364:	4640      	mov	r0, r8
 8006366:	47d0      	blx	sl
 8006368:	3001      	adds	r0, #1
 800636a:	d09b      	beq.n	80062a4 <_printf_i+0x164>
 800636c:	3501      	adds	r5, #1
 800636e:	68e3      	ldr	r3, [r4, #12]
 8006370:	9903      	ldr	r1, [sp, #12]
 8006372:	1a5b      	subs	r3, r3, r1
 8006374:	42ab      	cmp	r3, r5
 8006376:	dcf2      	bgt.n	800635e <_printf_i+0x21e>
 8006378:	e7eb      	b.n	8006352 <_printf_i+0x212>
 800637a:	2500      	movs	r5, #0
 800637c:	f104 0619 	add.w	r6, r4, #25
 8006380:	e7f5      	b.n	800636e <_printf_i+0x22e>
 8006382:	bf00      	nop
 8006384:	080066a5 	.word	0x080066a5
 8006388:	080066b6 	.word	0x080066b6

0800638c <memmove>:
 800638c:	4288      	cmp	r0, r1
 800638e:	b510      	push	{r4, lr}
 8006390:	eb01 0402 	add.w	r4, r1, r2
 8006394:	d902      	bls.n	800639c <memmove+0x10>
 8006396:	4284      	cmp	r4, r0
 8006398:	4623      	mov	r3, r4
 800639a:	d807      	bhi.n	80063ac <memmove+0x20>
 800639c:	1e43      	subs	r3, r0, #1
 800639e:	42a1      	cmp	r1, r4
 80063a0:	d008      	beq.n	80063b4 <memmove+0x28>
 80063a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063aa:	e7f8      	b.n	800639e <memmove+0x12>
 80063ac:	4402      	add	r2, r0
 80063ae:	4601      	mov	r1, r0
 80063b0:	428a      	cmp	r2, r1
 80063b2:	d100      	bne.n	80063b6 <memmove+0x2a>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063be:	e7f7      	b.n	80063b0 <memmove+0x24>

080063c0 <_free_r>:
 80063c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d048      	beq.n	8006458 <_free_r+0x98>
 80063c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f1a1 0404 	sub.w	r4, r1, #4
 80063d2:	bfb8      	it	lt
 80063d4:	18e4      	addlt	r4, r4, r3
 80063d6:	f000 f8d3 	bl	8006580 <__malloc_lock>
 80063da:	4a20      	ldr	r2, [pc, #128]	; (800645c <_free_r+0x9c>)
 80063dc:	9801      	ldr	r0, [sp, #4]
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	4615      	mov	r5, r2
 80063e2:	b933      	cbnz	r3, 80063f2 <_free_r+0x32>
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6014      	str	r4, [r2, #0]
 80063e8:	b003      	add	sp, #12
 80063ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ee:	f000 b8cd 	b.w	800658c <__malloc_unlock>
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	d90b      	bls.n	800640e <_free_r+0x4e>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	1862      	adds	r2, r4, r1
 80063fa:	4293      	cmp	r3, r2
 80063fc:	bf04      	itt	eq
 80063fe:	681a      	ldreq	r2, [r3, #0]
 8006400:	685b      	ldreq	r3, [r3, #4]
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	bf04      	itt	eq
 8006406:	1852      	addeq	r2, r2, r1
 8006408:	6022      	streq	r2, [r4, #0]
 800640a:	602c      	str	r4, [r5, #0]
 800640c:	e7ec      	b.n	80063e8 <_free_r+0x28>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x58>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x4e>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1855      	adds	r5, r2, r1
 800641c:	42a5      	cmp	r5, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x78>
 8006420:	6824      	ldr	r4, [r4, #0]
 8006422:	4421      	add	r1, r4
 8006424:	1854      	adds	r4, r2, r1
 8006426:	42a3      	cmp	r3, r4
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1dd      	bne.n	80063e8 <_free_r+0x28>
 800642c:	681c      	ldr	r4, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4421      	add	r1, r4
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	e7d7      	b.n	80063e8 <_free_r+0x28>
 8006438:	d902      	bls.n	8006440 <_free_r+0x80>
 800643a:	230c      	movs	r3, #12
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	e7d3      	b.n	80063e8 <_free_r+0x28>
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	1961      	adds	r1, r4, r5
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1949      	addeq	r1, r1, r5
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7c7      	b.n	80063e8 <_free_r+0x28>
 8006458:	b003      	add	sp, #12
 800645a:	bd30      	pop	{r4, r5, pc}
 800645c:	2000199c 	.word	0x2000199c

08006460 <_malloc_r>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	1ccd      	adds	r5, r1, #3
 8006464:	f025 0503 	bic.w	r5, r5, #3
 8006468:	3508      	adds	r5, #8
 800646a:	2d0c      	cmp	r5, #12
 800646c:	bf38      	it	cc
 800646e:	250c      	movcc	r5, #12
 8006470:	2d00      	cmp	r5, #0
 8006472:	4606      	mov	r6, r0
 8006474:	db01      	blt.n	800647a <_malloc_r+0x1a>
 8006476:	42a9      	cmp	r1, r5
 8006478:	d903      	bls.n	8006482 <_malloc_r+0x22>
 800647a:	230c      	movs	r3, #12
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	2000      	movs	r0, #0
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006482:	f000 f87d 	bl	8006580 <__malloc_lock>
 8006486:	4921      	ldr	r1, [pc, #132]	; (800650c <_malloc_r+0xac>)
 8006488:	680a      	ldr	r2, [r1, #0]
 800648a:	4614      	mov	r4, r2
 800648c:	b99c      	cbnz	r4, 80064b6 <_malloc_r+0x56>
 800648e:	4f20      	ldr	r7, [pc, #128]	; (8006510 <_malloc_r+0xb0>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	b923      	cbnz	r3, 800649e <_malloc_r+0x3e>
 8006494:	4621      	mov	r1, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f862 	bl	8006560 <_sbrk_r>
 800649c:	6038      	str	r0, [r7, #0]
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f85d 	bl	8006560 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d123      	bne.n	80064f2 <_malloc_r+0x92>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f86c 	bl	800658c <__malloc_unlock>
 80064b4:	e7e3      	b.n	800647e <_malloc_r+0x1e>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	1b5b      	subs	r3, r3, r5
 80064ba:	d417      	bmi.n	80064ec <_malloc_r+0x8c>
 80064bc:	2b0b      	cmp	r3, #11
 80064be:	d903      	bls.n	80064c8 <_malloc_r+0x68>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	441c      	add	r4, r3
 80064c4:	6025      	str	r5, [r4, #0]
 80064c6:	e004      	b.n	80064d2 <_malloc_r+0x72>
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	42a2      	cmp	r2, r4
 80064cc:	bf0c      	ite	eq
 80064ce:	600b      	streq	r3, [r1, #0]
 80064d0:	6053      	strne	r3, [r2, #4]
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f85a 	bl	800658c <__malloc_unlock>
 80064d8:	f104 000b 	add.w	r0, r4, #11
 80064dc:	1d23      	adds	r3, r4, #4
 80064de:	f020 0007 	bic.w	r0, r0, #7
 80064e2:	1ac2      	subs	r2, r0, r3
 80064e4:	d0cc      	beq.n	8006480 <_malloc_r+0x20>
 80064e6:	1a1b      	subs	r3, r3, r0
 80064e8:	50a3      	str	r3, [r4, r2]
 80064ea:	e7c9      	b.n	8006480 <_malloc_r+0x20>
 80064ec:	4622      	mov	r2, r4
 80064ee:	6864      	ldr	r4, [r4, #4]
 80064f0:	e7cc      	b.n	800648c <_malloc_r+0x2c>
 80064f2:	1cc4      	adds	r4, r0, #3
 80064f4:	f024 0403 	bic.w	r4, r4, #3
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d0e3      	beq.n	80064c4 <_malloc_r+0x64>
 80064fc:	1a21      	subs	r1, r4, r0
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f82e 	bl	8006560 <_sbrk_r>
 8006504:	3001      	adds	r0, #1
 8006506:	d1dd      	bne.n	80064c4 <_malloc_r+0x64>
 8006508:	e7cf      	b.n	80064aa <_malloc_r+0x4a>
 800650a:	bf00      	nop
 800650c:	2000199c 	.word	0x2000199c
 8006510:	200019a0 	.word	0x200019a0

08006514 <_realloc_r>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	4607      	mov	r7, r0
 8006518:	4614      	mov	r4, r2
 800651a:	460e      	mov	r6, r1
 800651c:	b921      	cbnz	r1, 8006528 <_realloc_r+0x14>
 800651e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006522:	4611      	mov	r1, r2
 8006524:	f7ff bf9c 	b.w	8006460 <_malloc_r>
 8006528:	b922      	cbnz	r2, 8006534 <_realloc_r+0x20>
 800652a:	f7ff ff49 	bl	80063c0 <_free_r>
 800652e:	4625      	mov	r5, r4
 8006530:	4628      	mov	r0, r5
 8006532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006534:	f000 f830 	bl	8006598 <_malloc_usable_size_r>
 8006538:	42a0      	cmp	r0, r4
 800653a:	d20f      	bcs.n	800655c <_realloc_r+0x48>
 800653c:	4621      	mov	r1, r4
 800653e:	4638      	mov	r0, r7
 8006540:	f7ff ff8e 	bl	8006460 <_malloc_r>
 8006544:	4605      	mov	r5, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d0f2      	beq.n	8006530 <_realloc_r+0x1c>
 800654a:	4631      	mov	r1, r6
 800654c:	4622      	mov	r2, r4
 800654e:	f7ff fbf7 	bl	8005d40 <memcpy>
 8006552:	4631      	mov	r1, r6
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff ff33 	bl	80063c0 <_free_r>
 800655a:	e7e9      	b.n	8006530 <_realloc_r+0x1c>
 800655c:	4635      	mov	r5, r6
 800655e:	e7e7      	b.n	8006530 <_realloc_r+0x1c>

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	; (800657c <_sbrk_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fa f97c 	bl	8000868 <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20001a88 	.word	0x20001a88

08006580 <__malloc_lock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_lock+0x8>)
 8006582:	f000 b811 	b.w	80065a8 <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	20001a90 	.word	0x20001a90

0800658c <__malloc_unlock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_unlock+0x8>)
 800658e:	f000 b80c 	b.w	80065aa <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	20001a90 	.word	0x20001a90

08006598 <_malloc_usable_size_r>:
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f18      	subs	r0, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfbc      	itt	lt
 80065a2:	580b      	ldrlt	r3, [r1, r0]
 80065a4:	18c0      	addlt	r0, r0, r3
 80065a6:	4770      	bx	lr

080065a8 <__retarget_lock_acquire_recursive>:
 80065a8:	4770      	bx	lr

080065aa <__retarget_lock_release_recursive>:
 80065aa:	4770      	bx	lr

080065ac <_init>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr

080065b8 <_fini>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr
